{
    "metadata": {
        "generator": "Refactored API Documentation Generator",
        "version": "3.0.0",
        "generated_at": "2025-06-02T12:43:04+00:00",
        "symfony_version": "7.0.10",
        "php_version": "8.4.7",
        "total_routes": 74,
        "total_controllers": 9,
        "total_schemas": 43
    },
    "controllers": [
        {
            "name": "AuthController",
            "description": "Auth endpoints",
            "route_count": 6,
            "routes": [
                {
                    "path": "/api/auth/register",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_auth_register",
                    "controller": "App\\Controller\\AuthController",
                    "action": "register",
                    "description": "Creates a new user with the provided information and returns a JWT token for immediate authentication.",
                    "summary": "Register a new user account",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\RegisterRequestDTO",
                        "schema_name": "RegisterRequestDTO",
                        "description": "Handles new user account creation with validation for all\nrequired fields. Used by the registration system to collect\nand validate user information before creating new accounts\nin the platform.",
                        "example": {
                            "email": "example_email",
                            "password": "example_password",
                            "firstName": "example_firstName",
                            "lastName": "example_lastName",
                            "username": "example_username"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\AuthResponseDTO",
                            "schema_name": "AuthResponseDTO",
                            "example": {
                                "message": "example_message",
                                "token": "example_token",
                                "user": {
                                    "id": "example_id",
                                    "email": "example_email",
                                    "firstName": "example_firstName",
                                    "lastName": "example_lastName",
                                    "username": "example_username",
                                    "roles": [],
                                    "avatar": "example_avatar",
                                    "plan": "example_plan",
                                    "emailVerified": true,
                                    "isActive": true,
                                    "createdAt": "example_createdAt",
                                    "lastLoginAt": "example_lastLoginAt",
                                    "updatedAt": "example_updatedAt",
                                    "settings": [],
                                    "stats": []
                                },
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/auth/login",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_auth_login",
                    "controller": "App\\Controller\\AuthController",
                    "action": "login",
                    "description": "Validates user credentials and returns a JWT token with user information.\nUpdates the user's last login timestamp.",
                    "summary": "Authenticate user and return JWT token",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\LoginRequestDTO",
                        "schema_name": "LoginRequestDTO",
                        "description": "Handles user login credentials for JWT token-based authentication.\nUsed by the authentication system to validate user credentials\nand generate access tokens for API authorization.",
                        "example": {
                            "email": "example_email",
                            "password": "example_password"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\AuthResponseDTO",
                            "schema_name": "AuthResponseDTO",
                            "example": {
                                "message": "example_message",
                                "token": "example_token",
                                "user": {
                                    "id": "example_id",
                                    "email": "example_email",
                                    "firstName": "example_firstName",
                                    "lastName": "example_lastName",
                                    "username": "example_username",
                                    "roles": [],
                                    "avatar": "example_avatar",
                                    "plan": "example_plan",
                                    "emailVerified": true,
                                    "isActive": true,
                                    "createdAt": "example_createdAt",
                                    "lastLoginAt": "example_lastLoginAt",
                                    "updatedAt": "example_updatedAt",
                                    "settings": [],
                                    "stats": []
                                },
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/auth/me",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_auth_me",
                    "controller": "App\\Controller\\AuthController",
                    "action": "me",
                    "description": "Returns detailed information about the currently authenticated user,\nincluding profile data, statistics, and account status.",
                    "summary": "Get current authenticated user profile",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\UserProfileResponseDTO",
                            "schema_name": "UserProfileResponseDTO",
                            "example": {
                                "user": {
                                    "id": "example_id",
                                    "email": "example_email",
                                    "firstName": "example_firstName",
                                    "lastName": "example_lastName",
                                    "username": "example_username",
                                    "roles": [],
                                    "avatar": "example_avatar",
                                    "plan": "example_plan",
                                    "emailVerified": true,
                                    "isActive": true,
                                    "createdAt": "example_createdAt",
                                    "lastLoginAt": "example_lastLoginAt",
                                    "updatedAt": "example_updatedAt",
                                    "settings": [],
                                    "stats": []
                                },
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/auth/profile",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_auth_update_profile",
                    "controller": "App\\Controller\\AuthController",
                    "action": "updateProfile",
                    "description": "Updates the authenticated user's profile data such as name, username, avatar, and settings.\nValidates uniqueness of username if provided.",
                    "summary": "Update user profile information",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\UpdateProfileRequestDTO",
                        "schema_name": "UpdateProfileRequestDTO",
                        "description": "Handles updating user profile information including personal details,\nusername, avatar, and application settings. All fields are optional\nto support partial updates.",
                        "example": {
                            "firstName": "example_firstName",
                            "lastName": "example_lastName",
                            "username": "example_username",
                            "avatar": "example_avatar",
                            "settings": {
                                "theme": "example_theme",
                                "language": "example_language",
                                "timezone": "example_timezone",
                                "emailNotifications": true,
                                "pushNotifications": true,
                                "autoSave": true,
                                "autoSaveInterval": 123,
                                "gridSnap": true,
                                "gridSize": 123,
                                "canvasQuality": 123
                            }
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\UserProfileResponseDTO",
                            "schema_name": "UserProfileResponseDTO",
                            "example": {
                                "user": {
                                    "id": "example_id",
                                    "email": "example_email",
                                    "firstName": "example_firstName",
                                    "lastName": "example_lastName",
                                    "username": "example_username",
                                    "roles": [],
                                    "avatar": "example_avatar",
                                    "plan": "example_plan",
                                    "emailVerified": true,
                                    "isActive": true,
                                    "createdAt": "example_createdAt",
                                    "lastLoginAt": "example_lastLoginAt",
                                    "updatedAt": "example_updatedAt",
                                    "settings": [],
                                    "stats": []
                                },
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/auth/change-password",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_auth_change_password",
                    "controller": "App\\Controller\\AuthController",
                    "action": "changePassword",
                    "description": "Updates the authenticated user's password after validating the current password.\nEnforces password strength requirements.",
                    "summary": "Change user password",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\ChangePasswordRequestDTO",
                        "schema_name": "ChangePasswordRequestDTO",
                        "description": "",
                        "example": {
                            "currentPassword": "example_currentPassword",
                            "newPassword": "example_newPassword",
                            "confirmPassword": "example_confirmPassword"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\SuccessResponseDTO",
                            "schema_name": "SuccessResponseDTO",
                            "example": {
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/auth/logout",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_auth_logout",
                    "controller": "App\\Controller\\AuthController",
                    "action": "logout",
                    "description": "Since JWT tokens are stateless, logout is primarily handled client-side by removing the token.\nThis endpoint provides a standardized logout response and could be extended with token blacklisting.",
                    "summary": "Logout user",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\SuccessResponseDTO",
                            "schema_name": "SuccessResponseDTO",
                            "example": {
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                }
            ]
        },
        {
            "name": "DesignController",
            "description": "Design endpoints",
            "route_count": 8,
            "routes": [
                {
                    "path": "/api/designs",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_designs_index",
                    "controller": "App\\Controller\\DesignController",
                    "action": "index",
                    "description": "Returns a paginated list of designs belonging to the authenticated user.\nSupports filtering by project, status, and search functionality.",
                    "summary": "List designs for authenticated user",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "request",
                            "type": "Symfony\\Component\\HttpFoundation\\Request",
                            "required": true,
                            "default": null,
                            "description": "HTTP request with optional query parameters:\n- page: Page number (default: 1, min: 1)\n- limit: Items per page (default: 20, max: 100)\n- project_id: Filter by project ID\n- search: Search term for design name/description\n- sort: Sort field (name, created_at, updated_at)\n- order: Sort direction (asc, desc)"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\PaginatedResponseDTO",
                            "schema_name": "PaginatedResponseDTO",
                            "example": {
                                "data": [],
                                "page": 123,
                                "limit": 123,
                                "total": 123,
                                "totalPages": 123,
                                "message": "example_message"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/designs",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_designs_create",
                    "controller": "App\\Controller\\DesignController",
                    "action": "create",
                    "description": "Creates a new design with the provided information and associates it with the authenticated user.\nValidates design data and initializes default canvas settings.",
                    "summary": "Create a new design",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\CreateDesignRequestDTO",
                        "schema_name": "CreateDesignRequestDTO",
                        "description": "This DTO handles the creation of new designs with specified canvas\ndimensions, initial design settings, and organizational metadata.",
                        "example": {
                            "name": "example_name",
                            "description": "example_description",
                            "data": {
                                "backgroundColor": "example_backgroundColor",
                                "animationSettings": [],
                                "gridSettings": [],
                                "viewSettings": [],
                                "globalStyles": [],
                                "customProperties": []
                            },
                            "projectId": 123,
                            "width": 123,
                            "height": 123,
                            "isPublic": true
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\DesignResponseDTO",
                            "schema_name": "DesignResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "design": [],
                                "designs": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/designs/{id}",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_designs_show",
                    "controller": "App\\Controller\\DesignController",
                    "action": "show",
                    "description": "Returns detailed information about a single design including canvas data and layers.\nOnly allows access to designs owned by the authenticated user or public designs.",
                    "summary": "Get details of a specific design",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The design ID"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\DesignResponseDTO",
                            "schema_name": "DesignResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "design": [],
                                "designs": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/designs/{id}",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_designs_update",
                    "controller": "App\\Controller\\DesignController",
                    "action": "update",
                    "description": "Updates design information and canvas data with the provided information.\nOnly allows updates to designs owned by the authenticated user.\nSupports partial updates and handles canvas data versioning.",
                    "summary": "Update an existing design",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The design ID to update"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\UpdateDesignRequestDTO",
                        "schema_name": "UpdateDesignRequestDTO",
                        "description": "This DTO handles partial updates to designs, allowing clients to\nupdate only the fields they want to change. All fields are optional\nand null values indicate no change should be made.",
                        "example": {
                            "name": "example_name",
                            "description": "example_description",
                            "data": {
                                "backgroundColor": "example_backgroundColor",
                                "animationSettings": [],
                                "gridSettings": [],
                                "viewSettings": [],
                                "globalStyles": [],
                                "customProperties": []
                            },
                            "projectId": 123,
                            "width": 123,
                            "height": 123,
                            "isPublic": true
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\DesignResponseDTO",
                            "schema_name": "DesignResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "design": [],
                                "designs": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/designs/{id}",
                    "methods": [
                        "DELETE"
                    ],
                    "name": "api_designs_delete",
                    "controller": "App\\Controller\\DesignController",
                    "action": "delete",
                    "description": "Permanently deletes a design and all its associated data (layers, media files, export jobs).\nOnly allows deletion of designs owned by the authenticated user.\nThis action cannot be undone.",
                    "summary": "Delete a design",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The design ID to delete"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\SuccessResponseDTO",
                            "schema_name": "SuccessResponseDTO",
                            "example": {
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/designs/{id}/duplicate",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_designs_duplicate",
                    "controller": "App\\Controller\\DesignController",
                    "action": "duplicate",
                    "description": "Creates a copy of an existing design with all its layers and settings.\nOnly allows duplication of designs owned by the authenticated user or public designs.\nThe duplicated design is always private and owned by the authenticated user.",
                    "summary": "Duplicate an existing design",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The design ID to duplicate"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\DuplicateDesignRequestDTO",
                        "schema_name": "DuplicateDesignRequestDTO",
                        "description": "Handles the duplication of complete designs including all layers,\nsettings, and metadata. Used by the design management system to\ncreate copies of existing designs with optional customization\nof the duplicate's name and target project.",
                        "example": {
                            "name": "example_name",
                            "projectId": 123
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\DesignResponseDTO",
                            "schema_name": "DesignResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "design": [],
                                "designs": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/designs/{id}/thumbnail",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_designs_update_thumbnail",
                    "controller": "App\\Controller\\DesignController",
                    "action": "updateThumbnail",
                    "description": "Updates the thumbnail image for a design.\nOnly allows updates to designs owned by the authenticated user.\nValidates thumbnail format and size requirements.",
                    "summary": "Update design thumbnail",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The design ID to update thumbnail for"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\UpdateDesignThumbnailRequestDTO",
                        "schema_name": "UpdateDesignThumbnailRequestDTO",
                        "description": "Handles updating the thumbnail image for an existing design.\nUsed when users want to change the preview image that represents\ntheir design in galleries, project lists, and search results.",
                        "example": {
                            "thumbnail": "example_thumbnail"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\DesignResponseDTO",
                            "schema_name": "DesignResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "design": [],
                                "designs": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/designs/search",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_designs_search",
                    "controller": "App\\Controller\\DesignController",
                    "action": "search",
                    "description": "Performs a comprehensive search across designs accessible to the authenticated user.\nSearches in design names, descriptions, and associated project information.",
                    "summary": "Search designs",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "request",
                            "type": "Symfony\\Component\\HttpFoundation\\Request",
                            "required": true,
                            "default": null,
                            "description": "HTTP request with search parameters:\n- q: Search query term (required)\n- page: Page number (default: 1, min: 1)\n- limit: Items per page (default: 20, max: 100)\n- project_id: Filter by specific project (optional)\n- sort: Sort field (relevance, name, created_at, updated_at)\n- order: Sort direction (asc, desc)"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\PaginatedResponseDTO",
                            "schema_name": "PaginatedResponseDTO",
                            "example": {
                                "data": [],
                                "page": 123,
                                "limit": 123,
                                "total": 123,
                                "totalPages": 123,
                                "message": "example_message"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                }
            ]
        },
        {
            "name": "ExportJobController",
            "description": "ExportJob endpoints",
            "route_count": 10,
            "routes": [
                {
                    "path": "/api/export-jobs",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_export_jobs_list",
                    "controller": "App\\Controller\\ExportJobController",
                    "action": "list",
                    "description": "Returns a paginated list of export jobs belonging to the authenticated user.\nSupports filtering by status and format, with configurable pagination.",
                    "summary": "List export jobs for authenticated user",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "request",
                            "type": "Symfony\\Component\\HttpFoundation\\Request",
                            "required": true,
                            "default": null,
                            "description": "HTTP request with optional query parameters:\n- page: Page number (default: 1, min: 1)\n- limit: Items per page (default: 20, max: 50)\n- status: Filter by job status (pending, processing, completed, failed, cancelled)\n- format: Filter by export format (png, jpg, svg, mp4, gif)"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ExportJobResponseDTO",
                            "schema_name": "ExportJobResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "job": [],
                                "jobs": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/export-jobs/{id}",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_export_jobs_show",
                    "controller": "App\\Controller\\ExportJobController",
                    "action": "show",
                    "description": "Returns detailed information about a single export job.\nOnly allows access to export jobs owned by the authenticated user.",
                    "summary": "Get details of a specific export job",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "exportJob",
                            "type": "App\\Entity\\ExportJob",
                            "required": true,
                            "default": null,
                            "description": "The export job entity (auto-resolved by Symfony)"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ExportJobResponseDTO",
                            "schema_name": "ExportJobResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "job": [],
                                "jobs": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/export-jobs",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_export_jobs_create",
                    "controller": "App\\Controller\\ExportJobController",
                    "action": "create",
                    "description": "Creates a new export job for rendering a design in the specified format and settings.\nValidates user access to the design and enqueues the job for background processing.",
                    "summary": "Create a new export job",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\Request\\CreateExportJobRequestDTO",
                        "schema_name": "CreateExportJobRequestDTO",
                        "description": "Handles the submission of design export jobs to the background\nprocessing system. Supports multiple output formats and quality\nsettings for rendering designs to various file types including\nstatic images, PDFs, and animated formats.",
                        "example": {
                            "designId": 123,
                            "format": "example_format",
                            "quality": "example_quality",
                            "width": 123,
                            "height": 123,
                            "scale": 123.45,
                            "transparent": true,
                            "backgroundColor": "example_backgroundColor",
                            "animationSettings": []
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ExportJobResponseDTO",
                            "schema_name": "ExportJobResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "job": [],
                                "jobs": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/export-jobs/{id}",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_export_jobs_update",
                    "controller": "App\\Controller\\ExportJobController",
                    "action": "update",
                    "description": "Export jobs are immutable after creation and cannot be modified.\nThis endpoint always returns an error indicating that modifications are not permitted.",
                    "summary": "Update an export job (Not allowed)",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "exportJob",
                            "type": "App\\Entity\\ExportJob",
                            "required": true,
                            "default": null,
                            "description": "The export job entity (auto-resolved by Symfony)"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ErrorResponseDTO",
                            "schema_name": "ErrorResponseDTO",
                            "example": {
                                "message": "example_message",
                                "details": [],
                                "code": "example_code",
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/export-jobs/{id}",
                    "methods": [
                        "DELETE"
                    ],
                    "name": "api_export_jobs_delete",
                    "controller": "App\\Controller\\ExportJobController",
                    "action": "delete",
                    "description": "Deletes an export job and its associated output file.\nOnly allows deletion of jobs in pending, failed, or completed status.\nOnly allows access to export jobs owned by the authenticated user.",
                    "summary": "Delete an export job",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "exportJob",
                            "type": "App\\Entity\\ExportJob",
                            "required": true,
                            "default": null,
                            "description": "The export job entity (auto-resolved by Symfony)"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\SuccessResponseDTO",
                            "schema_name": "SuccessResponseDTO",
                            "example": {
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/export-jobs/{id}/cancel",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_export_jobs_cancel",
                    "controller": "App\\Controller\\ExportJobController",
                    "action": "cancel",
                    "description": "Cancels an export job that is currently pending or being processed.\nSets the job status to cancelled and stops any ongoing processing.\nOnly allows access to export jobs owned by the authenticated user.",
                    "summary": "Cancel a pending or processing export job",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "exportJob",
                            "type": "App\\Entity\\ExportJob",
                            "required": true,
                            "default": null,
                            "description": "The export job entity (auto-resolved by Symfony)"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ExportJobResponseDTO",
                            "schema_name": "ExportJobResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "job": [],
                                "jobs": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/export-jobs/{id}/retry",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_export_jobs_retry",
                    "controller": "App\\Controller\\ExportJobController",
                    "action": "retry",
                    "description": "Resets a failed export job back to pending status for re-processing.\nClears error messages and resets progress to zero.\nOnly allows retry of jobs with failed status.\nOnly allows access to export jobs owned by the authenticated user.",
                    "summary": "Retry a failed export job",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "exportJob",
                            "type": "App\\Entity\\ExportJob",
                            "required": true,
                            "default": null,
                            "description": "The export job entity (auto-resolved by Symfony)"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ExportJobResponseDTO",
                            "schema_name": "ExportJobResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "job": [],
                                "jobs": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/export-jobs/{id}/download",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_export_jobs_download",
                    "controller": "App\\Controller\\ExportJobController",
                    "action": "download",
                    "description": "Downloads the generated file from a completed export job.\nReturns the file as an attachment with appropriate headers.\nOnly allows download of completed jobs with existing output files.\nOnly allows access to export jobs owned by the authenticated user.",
                    "summary": "Download export job output file",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "exportJob",
                            "type": "App\\Entity\\ExportJob",
                            "required": true,
                            "default": null,
                            "description": "The export job entity (auto-resolved by Symfony)"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/export-jobs/stats",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_export_jobs_stats",
                    "controller": "App\\Controller\\ExportJobController",
                    "action": "stats",
                    "description": "Returns comprehensive statistics about the user's export job usage,\nincluding totals by status, format breakdown, and success rate.",
                    "summary": "Get export job statistics for authenticated user",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ErrorResponseDTO",
                            "schema_name": "ErrorResponseDTO",
                            "example": {
                                "message": "example_message",
                                "details": [],
                                "code": "example_code",
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/export-jobs/queue-status",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_export_jobs_queue_status",
                    "controller": "App\\Controller\\ExportJobController",
                    "action": "queueStatus",
                    "description": "Returns system-wide export job queue statistics and health information.\nIncludes pending/processing job counts, average processing times, and queue health metrics.\nOnly accessible to users with ROLE_ADMIN.",
                    "summary": "Get export job queue status (Admin only)",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_ADMIN"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ErrorResponseDTO",
                            "schema_name": "ErrorResponseDTO",
                            "example": {
                                "message": "example_message",
                                "details": [],
                                "code": "example_code",
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                }
            ]
        },
        {
            "name": "LayerController",
            "description": "Layer endpoints",
            "route_count": 7,
            "routes": [
                {
                    "path": "/api/layers",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_layers_create",
                    "controller": "App\\Controller\\LayerController",
                    "action": "create",
                    "description": "Creates a new layer with specified properties and adds it to the target design.\nAutomatically assigns appropriate z-index and validates design ownership.\nSupports various layer types including text, shape, image, and group layers.",
                    "summary": "Create a new layer in a design",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\CreateLayerRequestDTO",
                        "schema_name": "CreateLayerRequestDTO",
                        "description": "Handles the creation of new design layers with all necessary properties\nfor proper initialization in the canvas editor. Supports all layer types\nincluding text, image, shape, group, video, and audio layers.",
                        "example": {
                            "designId": "example_designId",
                            "type": "example_type",
                            "name": "example_name",
                            "properties": "example_properties",
                            "transform": {
                                "x": 123.45,
                                "y": 123.45,
                                "width": 123.45,
                                "height": 123.45,
                                "rotation": 123.45,
                                "scaleX": 123.45,
                                "scaleY": 123.45,
                                "skewX": 123.45,
                                "skewY": 123.45,
                                "opacity": 123.45
                            },
                            "zIndex": 123,
                            "visible": true,
                            "locked": true,
                            "parentLayerId": "example_parentLayerId"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\LayerResponseDTO",
                            "schema_name": "LayerResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "layer": [],
                                "layers": [],
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/layers/{id}",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_layers_show",
                    "controller": "App\\Controller\\LayerController",
                    "action": "show",
                    "description": "Returns comprehensive information about a single layer including all properties,\nposition, styling, and metadata. Validates access permissions through design ownership.",
                    "summary": "Get details of a specific layer",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The layer ID to retrieve"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\LayerResponseDTO",
                            "schema_name": "LayerResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "layer": [],
                                "layers": [],
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/layers/{id}",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_layers_update",
                    "controller": "App\\Controller\\LayerController",
                    "action": "update",
                    "description": "Modifies layer properties including position, dimensions, styling, and content.\nSupports partial updates with validation and maintains layer hierarchy integrity.\nUsers can only update layers in designs they own.",
                    "summary": "Update an existing layer",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The layer ID to update"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\UpdateLayerRequestDTO",
                        "schema_name": "UpdateLayerRequestDTO",
                        "description": "Handles modification of existing design layers including visual properties,\npositioning, visibility, and hierarchy changes. All fields are optional\nto support partial updates of layer attributes.",
                        "example": {
                            "name": "example_name",
                            "properties": "example_properties",
                            "transform": {
                                "x": 123.45,
                                "y": 123.45,
                                "width": 123.45,
                                "height": 123.45,
                                "rotation": 123.45,
                                "scaleX": 123.45,
                                "scaleY": 123.45,
                                "skewX": 123.45,
                                "skewY": 123.45,
                                "opacity": 123.45
                            },
                            "zIndex": 123,
                            "visible": true,
                            "locked": true,
                            "parentLayerId": "example_parentLayerId"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\LayerResponseDTO",
                            "schema_name": "LayerResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "layer": [],
                                "layers": [],
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/layers/{id}",
                    "methods": [
                        "DELETE"
                    ],
                    "name": "api_layers_delete",
                    "controller": "App\\Controller\\LayerController",
                    "action": "delete",
                    "description": "Permanently removes a layer and all its associated data from the design.\nAutomatically adjusts z-indexes of remaining layers to maintain proper ordering.\nUsers can only delete layers in designs they own.",
                    "summary": "Delete a layer from a design",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The layer ID to delete"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\SuccessResponseDTO",
                            "schema_name": "SuccessResponseDTO",
                            "example": {
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/layers/{id}/duplicate",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_layers_duplicate",
                    "controller": "App\\Controller\\LayerController",
                    "action": "duplicate",
                    "description": "Creates an exact copy of an existing layer with all properties and styling.\nThe duplicated layer is positioned slightly offset from the original and\nassigned a new z-index to appear on top. Maintains all layer relationships.",
                    "summary": "Duplicate a layer within a design",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The layer ID to duplicate"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\DuplicateLayerRequestDTO",
                        "schema_name": "DuplicateLayerRequestDTO",
                        "description": "Handles the duplication of design layers with optional customization\nof the duplicate layer name and target design. Used by the layer\nmanagement system to create copies of existing layers within the\nsame design or across different designs.",
                        "example": {
                            "name": "example_name",
                            "targetDesignId": "example_targetDesignId"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\LayerResponseDTO",
                            "schema_name": "LayerResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "layer": [],
                                "layers": [],
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/layers/{id}/move",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_layers_move",
                    "controller": "App\\Controller\\LayerController",
                    "action": "move",
                    "description": "Changes the layer's position in the z-index stack or moves it to a specific position.\nSupports moving layers up/down in the stack or to absolute positions.\nAutomatically adjusts other layers' z-indexes to maintain proper ordering.",
                    "summary": "Move a layer within the design hierarchy",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The layer ID to move"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\MoveLayerRequestDTO",
                        "schema_name": "MoveLayerRequestDTO",
                        "description": "Handles repositioning of layers within the design canvas z-order.\nSupports both relative movements (up/down/top/bottom) and absolute\npositioning via z-index targeting. Used in the layer management\nsystem to control layer stacking order and visual hierarchy.",
                        "example": {
                            "direction": "example_direction",
                            "targetZIndex": 123
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\LayerResponseDTO",
                            "schema_name": "LayerResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "layer": [],
                                "layers": [],
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/layers/bulk-update",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_layers_bulk_update",
                    "controller": "App\\Controller\\LayerController",
                    "action": "bulkUpdate",
                    "description": "Updates multiple layers in a single operation for performance efficiency.\nProcesses each layer individually with proper validation and permission checks.\nReturns detailed results including successful updates and any failures.",
                    "summary": "Bulk update multiple layers",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\BulkUpdateLayersRequestDTO",
                        "schema_name": "BulkUpdateLayersRequestDTO",
                        "description": "This DTO handles batch operations for updating layer properties, allowing\nefficient modification of multiple layers in a single API call. Each layer\nupdate includes the layer ID and the specific changes to apply.",
                        "example": {
                            "layers": []
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\SuccessResponseDTO",
                            "schema_name": "SuccessResponseDTO",
                            "example": {
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                }
            ]
        },
        {
            "name": "MediaController",
            "description": "Media endpoints",
            "route_count": 9,
            "routes": [
                {
                    "path": "/api/media",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_media_list",
                    "controller": "App\\Controller\\MediaController",
                    "action": "list",
                    "description": "Returns a paginated list of media files belonging to the authenticated user.\nSupports filtering by type, format, and search functionality.",
                    "summary": "List media files for authenticated user",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\SearchMediaRequestDTO",
                        "schema_name": "SearchMediaRequestDTO",
                        "description": "Handles search operations for media files with advanced filtering\ncapabilities including type, source, pagination, and tag-based\nfiltering. Used by the media library to provide rich search\nfunctionality for users to find specific media files.",
                        "example": {
                            "page": 123,
                            "limit": 123,
                            "type": "example_type",
                            "source": "example_source",
                            "search": "example_search",
                            "tags": "example_tags"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\PaginatedResponseDTO",
                            "schema_name": "PaginatedResponseDTO",
                            "example": {
                                "data": [],
                                "page": 123,
                                "limit": 123,
                                "total": 123,
                                "totalPages": 123,
                                "message": "example_message"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/media/{uuid}",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_media_show",
                    "controller": "App\\Controller\\MediaController",
                    "action": "show",
                    "description": "Returns detailed information about a single media file including metadata.\nOnly allows access to media files owned by the authenticated user.",
                    "summary": "Get details of a specific media file",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "required": true,
                            "default": null,
                            "description": "The media file UUID"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\MediaResponseDTO",
                            "schema_name": "MediaResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "media": [],
                                "mediaList": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/media",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_media_create",
                    "controller": "App\\Controller\\MediaController",
                    "action": "create",
                    "description": "Creates a new media file record in the database with the provided metadata.\nThis endpoint handles media file upload processing and validation.\nAll uploaded media files are associated with the authenticated user.",
                    "summary": "Create a new media file entry",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\CreateMediaRequestDTO",
                        "schema_name": "CreateMediaRequestDTO",
                        "description": "This DTO handles the creation of media assets including images, videos,\nand audio files from various sources (uploads, stock photo APIs, etc.).\nIncludes comprehensive metadata and organizational features.",
                        "example": {
                            "name": "example_name",
                            "type": "example_type",
                            "mimeType": "example_mimeType",
                            "size": 123,
                            "url": "example_url",
                            "thumbnailUrl": "example_thumbnailUrl",
                            "width": 123,
                            "height": 123,
                            "duration": 123.45,
                            "source": "example_source",
                            "sourceId": "example_sourceId",
                            "metadata": {
                                "fileSize": 123,
                                "mimeType": "example_mimeType",
                                "width": 123,
                                "height": 123,
                                "duration": 123.45,
                                "bitrate": 123,
                                "sampleRate": 123,
                                "channels": 123,
                                "colorSpace": "example_colorSpace",
                                "hasTransparency": true,
                                "frameRate": 123,
                                "codec": "example_codec",
                                "aspectRatio": 123.45
                            },
                            "tags": [],
                            "attribution": "example_attribution",
                            "license": "example_license",
                            "isPremium": true,
                            "isActive": true
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\MediaResponseDTO",
                            "schema_name": "MediaResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "media": [],
                                "mediaList": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/media/{uuid}",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_media_update",
                    "controller": "App\\Controller\\MediaController",
                    "action": "update",
                    "description": "Updates the metadata and properties of an existing media file.\nOnly allows updating specific fields like name, metadata, tags, and status flags.\nCore file properties like URL, type, and dimensions cannot be modified.\nUsers can only update media files they own.",
                    "summary": "Update media file metadata",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "required": true,
                            "default": null,
                            "description": "The media file UUID to update"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\UpdateMediaRequestDTO",
                        "schema_name": "UpdateMediaRequestDTO",
                        "description": "This DTO handles partial updates to media assets, allowing clients to\nupdate only the fields they want to change. All fields are optional\nand null values indicate no change should be made.",
                        "example": {
                            "name": "example_name",
                            "description": "example_description",
                            "tags": [],
                            "metadata": {
                                "fileSize": 123,
                                "mimeType": "example_mimeType",
                                "width": 123,
                                "height": 123,
                                "duration": 123.45,
                                "bitrate": 123,
                                "sampleRate": 123,
                                "channels": 123,
                                "colorSpace": "example_colorSpace",
                                "hasTransparency": true,
                                "frameRate": 123,
                                "codec": "example_codec",
                                "aspectRatio": 123.45
                            },
                            "isPremium": true,
                            "isActive": true,
                            "isPublic": true
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\MediaResponseDTO",
                            "schema_name": "MediaResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "media": [],
                                "mediaList": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/media/{uuid}",
                    "methods": [
                        "DELETE"
                    ],
                    "name": "api_media_delete",
                    "controller": "App\\Controller\\MediaController",
                    "action": "delete",
                    "description": "Permanently removes a media file record from the database.\nThis operation also triggers cleanup of associated file storage.\nUsers can only delete media files they own for security.",
                    "summary": "Delete a media file",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "required": true,
                            "default": null,
                            "description": "The media file UUID to delete"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\SuccessResponseDTO",
                            "schema_name": "SuccessResponseDTO",
                            "example": {
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/media/search",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_media_search",
                    "controller": "App\\Controller\\MediaController",
                    "action": "search",
                    "description": "Performs advanced search across user's media library with filtering and sorting.\nSupports full-text search on filenames, descriptions, and tags.\nReturns paginated results with comprehensive media metadata.",
                    "summary": "Search media files",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\SearchMediaRequestDTO",
                        "schema_name": "SearchMediaRequestDTO",
                        "description": "Handles search operations for media files with advanced filtering\ncapabilities including type, source, pagination, and tag-based\nfiltering. Used by the media library to provide rich search\nfunctionality for users to find specific media files.",
                        "example": {
                            "page": 123,
                            "limit": 123,
                            "type": "example_type",
                            "source": "example_source",
                            "search": "example_search",
                            "tags": "example_tags"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\PaginatedResponseDTO",
                            "schema_name": "PaginatedResponseDTO",
                            "example": {
                                "data": [],
                                "page": 123,
                                "limit": 123,
                                "total": 123,
                                "totalPages": 123,
                                "message": "example_message"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/media/duplicate/{uuid}",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_media_duplicate",
                    "controller": "App\\Controller\\MediaController",
                    "action": "duplicate",
                    "description": "Creates a copy of an existing media file for the authenticated user.\nThe duplicated media inherits all properties from the original but gets\na new UUID and is owned by the current user. This allows users to\ncreate personal copies of accessible media files.",
                    "summary": "Duplicate a media file",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "required": true,
                            "default": null,
                            "description": "The UUID of the media file to duplicate"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\DuplicateMediaRequestDTO",
                        "schema_name": "DuplicateMediaRequestDTO",
                        "description": "Handles the duplication of media files including images, videos,\nand other assets. Creates a personal copy of accessible media\nfiles for the authenticated user with optional name customization.\nUsed by the media library for creating user-owned copies of media.",
                        "example": {
                            "name": "example_name"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\MediaResponseDTO",
                            "schema_name": "MediaResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "media": [],
                                "mediaList": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/media/stock/search",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_media_stock_search",
                    "controller": "App\\Controller\\MediaController",
                    "action": "stockSearch",
                    "description": "Integrates with external stock media APIs (Unsplash, Pexels, Pixabay, etc.)\nto provide users with access to high-quality stock images and videos.\nResults include licensing information and attribution requirements.\nCurrently in development - returns empty results with implementation notice.",
                    "summary": "Search stock media from external providers",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\StockSearchRequestDTO",
                        "schema_name": "StockSearchRequestDTO",
                        "description": "Handles search operations for stock media from external providers\nlike Unsplash, Pexels, and Pixabay. Provides structured search\nparameters for integrating with third-party stock media APIs\nto expand the available media library for users.",
                        "example": {
                            "query": "example_query",
                            "page": 123,
                            "limit": 123,
                            "type": "example_type",
                            "source": "example_source"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\PaginatedResponseDTO",
                            "schema_name": "PaginatedResponseDTO",
                            "example": {
                                "data": [],
                                "page": 123,
                                "limit": 123,
                                "total": 123,
                                "totalPages": 123,
                                "message": "example_message"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/media/bulk/delete",
                    "methods": [
                        "DELETE"
                    ],
                    "name": "api_media_bulk_delete",
                    "controller": "App\\Controller\\MediaController",
                    "action": "bulkDelete",
                    "description": "Deletes multiple media files in a single operation for efficiency.\nProcesses each file individually with proper permission checks.\nReturns detailed results including successful deletions and failures.\nUsers can only delete media files they own.",
                    "summary": "Bulk delete multiple media files",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\BulkDeleteMediaRequestDTO",
                        "schema_name": "BulkDeleteMediaRequestDTO",
                        "description": "Handles bulk deletion of multiple media files by their UUIDs.\nUsed by the media management system to allow users to delete\nmultiple media files in a single operation with validation\nand permission checks.",
                        "example": {
                            "uuids": []
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\SuccessResponseDTO",
                            "schema_name": "SuccessResponseDTO",
                            "example": {
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                }
            ]
        },
        {
            "name": "PluginController",
            "description": "Plugin endpoints",
            "route_count": 12,
            "routes": [
                {
                    "path": "/api/plugins",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_plugins_list",
                    "controller": "App\\Controller\\PluginController",
                    "action": "list",
                    "description": "Supports filtering by category, search terms, status, and sorting.\nReturns paginated results with plugin metadata.",
                    "summary": "Retrieve paginated list of plugins with filtering options",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "request",
                            "type": "Symfony\\Component\\HttpFoundation\\Request",
                            "required": true,
                            "default": null,
                            "description": "HTTP request containing query parameters"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/plugins/{id}",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_plugins_show",
                    "controller": "App\\Controller\\PluginController",
                    "action": "show",
                    "description": "Returns comprehensive plugin details including manifest, permissions,\nand review information. Access is restricted based on plugin status and user role.",
                    "summary": "Retrieve detailed information about a specific plugin",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "plugin",
                            "type": "App\\Entity\\Plugin",
                            "required": true,
                            "default": null,
                            "description": "The plugin entity to display"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/plugins",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_plugins_create",
                    "controller": "App\\Controller\\PluginController",
                    "action": "create",
                    "description": "Creates a new plugin with the provided metadata. The plugin is initially\nset to pending status and requires admin approval before becoming available.",
                    "summary": "Create a new plugin",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\Request\\CreatePluginRequestDTO",
                        "schema_name": "CreatePluginRequestDTO",
                        "description": "Handles the submission of new plugins to the platform's plugin\nsystem. Contains all necessary metadata and configuration for\nplugin registration, validation, and eventual approval process.\nUsed in the plugin management system to onboard new extensions.",
                        "example": {
                            "name": "example_name",
                            "description": "example_description",
                            "categories": [],
                            "version": "example_version",
                            "permissions": [],
                            "manifest": []
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/plugins/{id}",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_plugins_update",
                    "controller": "App\\Controller\\PluginController",
                    "action": "update",
                    "description": "Updates plugin metadata. Only the plugin developer or admin can perform updates.\nAdmin users can also modify the plugin status.",
                    "summary": "Update an existing plugin",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "plugin",
                            "type": "App\\Entity\\Plugin",
                            "required": true,
                            "default": null,
                            "description": "The plugin entity to update"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\Request\\UpdatePluginRequestDTO",
                        "schema_name": "UpdatePluginRequestDTO",
                        "description": "Handles partial updates to existing plugins in the platform's\nplugin system. All fields are optional and null values indicate\nno change should be made. Used for both plugin developer updates\nand administrative status changes.",
                        "example": {
                            "name": "example_name",
                            "description": "example_description",
                            "categories": [],
                            "version": "example_version",
                            "permissions": [],
                            "manifest": [],
                            "status": "example_status"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/plugins/{id}",
                    "methods": [
                        "DELETE"
                    ],
                    "name": "api_plugins_delete",
                    "controller": "App\\Controller\\PluginController",
                    "action": "delete",
                    "description": "Permanently removes a plugin from the system. Only the plugin developer\nor administrators can delete plugins. This action is irreversible.",
                    "summary": "Delete a plugin",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "plugin",
                            "type": "App\\Entity\\Plugin",
                            "required": true,
                            "default": null,
                            "description": "The plugin entity to delete"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/plugins/{id}/install",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_plugins_install",
                    "controller": "App\\Controller\\PluginController",
                    "action": "install",
                    "description": "Installs an approved plugin for the authenticated user. Increments the\ninstallation count and handles plugin registration logic.",
                    "summary": "Install a plugin for the current user",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "plugin",
                            "type": "App\\Entity\\Plugin",
                            "required": true,
                            "default": null,
                            "description": "The plugin entity to install"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/plugins/{id}/uninstall",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_plugins_uninstall",
                    "controller": "App\\Controller\\PluginController",
                    "action": "uninstall",
                    "description": "Removes a plugin from the user's installed plugins and cleans up\nassociated data and files.",
                    "summary": "Uninstall a plugin for the current user",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "plugin",
                            "type": "App\\Entity\\Plugin",
                            "required": true,
                            "default": null,
                            "description": "The plugin entity to uninstall"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/plugins/{id}/upload-file",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_plugins_upload_file",
                    "controller": "App\\Controller\\PluginController",
                    "action": "uploadFile",
                    "description": "Allows plugin developers to upload plugin files (ZIP format).\nPerforms validation and stores the file securely.",
                    "summary": "Upload a plugin file",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "plugin",
                            "type": "App\\Entity\\Plugin",
                            "required": true,
                            "default": null,
                            "description": "The plugin entity to upload files for"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\Request\\UploadPluginFileRequestDTO",
                        "schema_name": "UploadPluginFileRequestDTO",
                        "description": "Handles validation and encapsulation of plugin file upload data including\nfile type validation, size constraints, and security checks for plugin files.",
                        "example": {
                            "file": "example_value"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/plugins/{id}/approve",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_plugins_approve",
                    "controller": "App\\Controller\\PluginController",
                    "action": "approve",
                    "description": "Changes plugin status to approved, making it available in the marketplace.\nRecords approval timestamp and reviewing administrator.",
                    "summary": "Approve a plugin (Admin only)",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_ADMIN"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "plugin",
                            "type": "App\\Entity\\Plugin",
                            "required": true,
                            "default": null,
                            "description": "The plugin entity to approve"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/plugins/{id}/reject",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_plugins_reject",
                    "controller": "App\\Controller\\PluginController",
                    "action": "reject",
                    "description": "Changes plugin status to rejected with a provided reason.\nRecords rejection timestamp and reviewing admin.",
                    "summary": "Reject a plugin (Admin only)",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_ADMIN"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "plugin",
                            "type": "App\\Entity\\Plugin",
                            "required": true,
                            "default": null,
                            "description": "The plugin entity to reject"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\Request\\RejectPluginRequestDTO",
                        "schema_name": "RejectPluginRequestDTO",
                        "description": "",
                        "example": {
                            "reason": "example_reason"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/plugins/categories",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_plugins_categories",
                    "controller": "App\\Controller\\PluginController",
                    "action": "categories",
                    "description": "Returns a list of all available plugin categories for filtering\nand classification purposes.",
                    "summary": "Get available plugin categories",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/plugins/my-plugins",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_plugins_my_plugins",
                    "controller": "App\\Controller\\PluginController",
                    "action": "myPlugins",
                    "description": "Returns paginated list of plugins created by the authenticated user,\nincluding all statuses (pending, approved, rejected).",
                    "summary": "Get current user's plugins",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "request",
                            "type": "Symfony\\Component\\HttpFoundation\\Request",
                            "required": true,
                            "default": null,
                            "description": "HTTP request containing pagination parameters"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                }
            ]
        },
        {
            "name": "ProjectController",
            "description": "Project endpoints",
            "route_count": 8,
            "routes": [
                {
                    "path": "/api/projects",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_projects_index",
                    "controller": "App\\Controller\\ProjectController",
                    "action": "index",
                    "description": "Returns a paginated list of projects belonging to the authenticated user.\nSupports filtering by status, sorting by various fields, and search functionality.",
                    "summary": "List projects for authenticated user",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "request",
                            "type": "Symfony\\Component\\HttpFoundation\\Request",
                            "required": true,
                            "default": null,
                            "description": "HTTP request with optional query parameters:\n- page: Page number (default: 1, min: 1)\n- limit: Items per page (default: 20, max: 100)\n- sort: Sort field (name, created_at, updated_at)\n- order: Sort direction (asc, desc)\n- search: Search term for project name/description\n- status: Filter by project status"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\PaginatedResponseDTO",
                            "schema_name": "PaginatedResponseDTO",
                            "example": {
                                "data": [],
                                "page": 123,
                                "limit": 123,
                                "total": 123,
                                "totalPages": 123,
                                "message": "example_message"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/projects",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_projects_create",
                    "controller": "App\\Controller\\ProjectController",
                    "action": "create",
                    "description": "Creates a new project with the provided information and associates it with the authenticated user.\nValidates project data and sets default values for optional fields.",
                    "summary": "Create a new project",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\CreateProjectRequestDTO",
                        "schema_name": "CreateProjectRequestDTO",
                        "description": "This DTO handles the creation of new projects with all necessary\nconfiguration options, including canvas settings, metadata, and\norganizational tags.",
                        "example": {
                            "name": "example_name",
                            "description": "example_description",
                            "isPublic": true,
                            "settings": {
                                "canvasWidth": 123,
                                "canvasHeight": 123,
                                "backgroundColor": "example_backgroundColor",
                                "orientation": "example_orientation",
                                "units": "example_units",
                                "dpi": 123,
                                "gridVisible": true,
                                "rulersVisible": true,
                                "guidesVisible": true,
                                "snapToGrid": true,
                                "snapToGuides": true,
                                "snapToObjects": true
                            },
                            "tags": [],
                            "thumbnail": "example_thumbnail"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ProjectResponseDTO",
                            "schema_name": "ProjectResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "project": [],
                                "projects": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/projects/{id}",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_projects_show",
                    "controller": "App\\Controller\\ProjectController",
                    "action": "show",
                    "description": "Returns detailed information about a single project.\nOnly allows access to projects owned by the authenticated user or public projects.",
                    "summary": "Get details of a specific project",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The project ID"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ProjectResponseDTO",
                            "schema_name": "ProjectResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "project": [],
                                "projects": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/projects/{id}",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_projects_update",
                    "controller": "App\\Controller\\ProjectController",
                    "action": "update",
                    "description": "Updates project information with the provided data.\nOnly allows updates to projects owned by the authenticated user.\nValidates updated data and handles partial updates.",
                    "summary": "Update an existing project",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The project ID to update"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\UpdateProjectRequestDTO",
                        "schema_name": "UpdateProjectRequestDTO",
                        "description": "This DTO handles partial updates to projects, allowing clients to\nupdate only the fields they want to change. All fields are optional\nand null values indicate no change should be made.",
                        "example": {
                            "name": "example_name",
                            "description": "example_description",
                            "isPublic": true,
                            "settings": {
                                "canvasWidth": 123,
                                "canvasHeight": 123,
                                "backgroundColor": "example_backgroundColor",
                                "orientation": "example_orientation",
                                "units": "example_units",
                                "dpi": 123,
                                "gridVisible": true,
                                "rulersVisible": true,
                                "guidesVisible": true,
                                "snapToGrid": true,
                                "snapToGuides": true,
                                "snapToObjects": true
                            },
                            "tags": [],
                            "thumbnail": "example_thumbnail"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ProjectResponseDTO",
                            "schema_name": "ProjectResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "project": [],
                                "projects": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/projects/{id}",
                    "methods": [
                        "DELETE"
                    ],
                    "name": "api_projects_delete",
                    "controller": "App\\Controller\\ProjectController",
                    "action": "delete",
                    "description": "Permanently deletes a project and all its associated data (designs, media files, etc.).\nOnly allows deletion of projects owned by the authenticated user.\nThis action cannot be undone.",
                    "summary": "Delete a project",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The project ID to delete"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\SuccessResponseDTO",
                            "schema_name": "SuccessResponseDTO",
                            "example": {
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/projects/{id}/duplicate",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_projects_duplicate",
                    "controller": "App\\Controller\\ProjectController",
                    "action": "duplicate",
                    "description": "Creates a copy of an existing project with all its designs and settings.\nOnly allows duplication of projects owned by the authenticated user or public projects.\nThe duplicated project is always private and owned by the authenticated user.",
                    "summary": "Duplicate an existing project",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The project ID to duplicate"
                        }
                    ],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\DuplicateProjectRequestDTO",
                        "schema_name": "DuplicateProjectRequestDTO",
                        "description": "Handles the creation of a complete copy of an existing project\nincluding all associated designs, layers, and metadata. Used\nin the project management system to allow users to quickly\ncreate new projects based on existing templates.",
                        "example": {
                            "name": "example_name"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ProjectResponseDTO",
                            "schema_name": "ProjectResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "project": [],
                                "projects": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/projects/public",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_projects_public",
                    "controller": "App\\Controller\\ProjectController",
                    "action": "publicProjects",
                    "description": "Returns a paginated list of publicly shared projects from all users.\nSupports search, filtering, and sorting functionality for project discovery.",
                    "summary": "List public projects",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\SearchProjectsRequestDTO",
                        "schema_name": "SearchProjectsRequestDTO",
                        "description": "Handles search and filtering operations for user projects\nwith support for text-based search, tag filtering, and\npagination. Used by the project management system to allow\nusers to find and organize their design projects efficiently.",
                        "example": {
                            "page": 123,
                            "limit": 123,
                            "search": "example_search",
                            "tags": "example_tags"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\PaginatedResponseDTO",
                            "schema_name": "PaginatedResponseDTO",
                            "example": {
                                "data": [],
                                "page": 123,
                                "limit": 123,
                                "total": 123,
                                "totalPages": 123,
                                "message": "example_message"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/projects/{id}/share",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_projects_toggle_share",
                    "controller": "App\\Controller\\ProjectController",
                    "action": "toggleShare",
                    "description": "Toggles the public/private status of a project.\nOnly allows modification of projects owned by the authenticated user.\nUpdates the project's visibility and sharing settings.",
                    "summary": "Toggle project sharing status",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "id",
                            "type": "int",
                            "required": true,
                            "default": null,
                            "description": "The project ID to toggle sharing for"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\ProjectResponseDTO",
                            "schema_name": "ProjectResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "project": [],
                                "projects": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                }
            ]
        },
        {
            "name": "TemplateController",
            "description": "Template endpoints",
            "route_count": 6,
            "routes": [
                {
                    "path": "/api/templates",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_templates_list",
                    "controller": "App\\Controller\\TemplateController",
                    "action": "list",
                    "description": "Returns a paginated list of templates with optional category filtering.\nIncludes template metadata, thumbnail images, and usage statistics.\nBoth public templates and user-created templates are included in results.",
                    "summary": "List available templates with filtering and pagination",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "request",
                            "type": "Symfony\\Component\\HttpFoundation\\Request",
                            "required": true,
                            "default": null,
                            "description": "HTTP request containing query parameters:\n- page: Page number (default: 1, min: 1)\n- limit: Items per page (default: 20, max: 50)\n- category: Category filter (optional)"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\TemplateResponseDTO",
                            "schema_name": "TemplateResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "template": [],
                                "templates": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/templates/{uuid}",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_templates_show",
                    "controller": "App\\Controller\\TemplateController",
                    "action": "show",
                    "description": "Returns comprehensive template information including design data, metadata,\nand usage statistics. Automatically increments the view count for analytics.\nOnly returns active templates that are publicly available.",
                    "summary": "Get details of a specific template",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "required": true,
                            "default": null,
                            "description": "The template UUID to retrieve"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\TemplateResponseDTO",
                            "schema_name": "TemplateResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "template": [],
                                "templates": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/templates",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_templates_create",
                    "controller": "App\\Controller\\TemplateController",
                    "action": "create",
                    "description": "Creates a new template from user design with metadata and canvas configuration.\nTemplates can be made public for marketplace or kept private for personal use.\nRequires authentication and validates all template data before creation.",
                    "summary": "Create a new template",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\Request\\CreateTemplateRequestDTO",
                        "schema_name": "CreateTemplateRequestDTO",
                        "description": "",
                        "example": {
                            "name": "example_name",
                            "description": "example_description",
                            "category": "example_category",
                            "tags": [],
                            "width": 123,
                            "height": 123,
                            "canvasSettings": [],
                            "layers": [],
                            "thumbnailUrl": "example_thumbnailUrl",
                            "previewUrl": "example_previewUrl",
                            "isPremium": true,
                            "isActive": true
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\TemplateResponseDTO",
                            "schema_name": "TemplateResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "template": [],
                                "templates": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/templates/search",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_templates_search",
                    "controller": "App\\Controller\\TemplateController",
                    "action": "search",
                    "description": "Performs comprehensive template search with support for text queries,\ncategory filtering, and tag-based search. Returns paginated results\nsorted by relevance and usage popularity.",
                    "summary": "Search templates with advanced filtering",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\Request\\SearchTemplateRequestDTO",
                        "schema_name": "SearchTemplateRequestDTO",
                        "description": "",
                        "example": {
                            "q": "example_q",
                            "category": "example_category",
                            "page": 123,
                            "limit": 123
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\TemplateSearchResponseDTO",
                            "schema_name": "TemplateSearchResponseDTO",
                            "example": {
                                "templates": [],
                                "page": 123,
                                "limit": 123,
                                "total": 123,
                                "totalPages": 123,
                                "message": "example_message"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/templates/{uuid}/use",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_templates_use",
                    "controller": "App\\Controller\\TemplateController",
                    "action": "useTemplate",
                    "description": "Creates a new design project based on the specified template.\nCopies all template layers, settings, and properties to the new design.\nAutomatically increments the template usage count for analytics.",
                    "summary": "Use a template to create a new design",
                    "deprecated": false,
                    "security": [
                        {
                            "type": "IsGranted",
                            "args": [
                                "ROLE_USER"
                            ]
                        }
                    ],
                    "tags": [],
                    "parameters": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "required": true,
                            "default": null,
                            "description": "The template UUID to use for design creation"
                        }
                    ],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\DesignResponseDTO",
                            "schema_name": "DesignResponseDTO",
                            "example": {
                                "success": true,
                                "message": "example_message",
                                "design": [],
                                "designs": [],
                                "total": 123,
                                "page": 123,
                                "totalPages": 123,
                                "timestamp": "example_value"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/templates/categories",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_templates_categories",
                    "controller": "App\\Controller\\TemplateController",
                    "action": "getCategories",
                    "description": "Returns a list of all available template categories for filtering\nand organization purposes. Categories help users find relevant templates\nfor their specific design needs and use cases.",
                    "summary": "Get available template categories",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": "App\\DTO\\Response\\SuccessResponseDTO",
                            "schema_name": "SuccessResponseDTO",
                            "example": {
                                "message": "example_message",
                                "success": true,
                                "timestamp": "example_timestamp"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                }
            ]
        },
        {
            "name": "UserController",
            "description": "User endpoints",
            "route_count": 8,
            "routes": [
                {
                    "path": "/api/user/profile",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_user_profile",
                    "controller": "App\\Controller\\UserController",
                    "action": "getProfile",
                    "description": "Returns comprehensive profile data including personal information,\nsettings, and account details for the authenticated user.",
                    "summary": "Get current user's profile information",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/user/profile",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_user_update_profile",
                    "controller": "App\\Controller\\UserController",
                    "action": "updateProfile",
                    "description": "Updates user profile data including personal information, professional details,\nand account preferences. Uses comprehensive validation and returns updated profile.",
                    "summary": "Update current user's profile information",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\Request\\UpdateProfileRequestDTO",
                        "schema_name": "UpdateProfileRequestDTO",
                        "description": "",
                        "example": {
                            "firstName": "example_firstName",
                            "lastName": "example_lastName",
                            "username": "example_username",
                            "email": "example_email",
                            "jobTitle": "example_jobTitle",
                            "company": "example_company",
                            "website": "example_website",
                            "portfolio": "example_portfolio",
                            "bio": "example_bio",
                            "socialLinks": [],
                            "timezone": "example_timezone",
                            "language": "example_language"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/user/avatar",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_user_upload_avatar",
                    "controller": "App\\Controller\\UserController",
                    "action": "uploadAvatar",
                    "description": "Handles avatar file upload, validation, and updates user profile.\nAutomatically removes old avatar file and returns new avatar URL.",
                    "summary": "Upload and update user avatar image",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\Request\\UploadAvatarRequestDTO",
                        "schema_name": "UploadAvatarRequestDTO",
                        "description": "Handles validation and encapsulation of avatar file upload data including\nfile type validation, size constraints, and security checks.",
                        "example": {
                            "avatar": "example_value"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/user/password",
                    "methods": [
                        "PUT"
                    ],
                    "name": "api_user_change_password",
                    "controller": "App\\Controller\\UserController",
                    "action": "changePassword",
                    "description": "Updates user password after validating current password and ensuring\nnew password meets security requirements including confirmation match.",
                    "summary": "Change user password",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": {
                        "required": true,
                        "content_type": "application/json",
                        "schema_class": "App\\DTO\\Request\\ChangePasswordRequestDTO",
                        "schema_name": "ChangePasswordRequestDTO",
                        "description": "Handles secure password updates for authenticated users.\nValidates the current password before allowing the change\nand ensures the new password meets security requirements\nwith confirmation validation.",
                        "example": {
                            "currentPassword": "example_currentPassword",
                            "newPassword": "example_newPassword",
                            "confirmPassword": "example_confirmPassword"
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/user/settings/privacy/download",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_user_download_data",
                    "controller": "App\\Controller\\UserController",
                    "action": "requestDataDownload",
                    "description": "Initiates a background process to prepare comprehensive data export\nfor the user, including all personal data and content.",
                    "summary": "Request user data download for GDPR compliance",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/user/settings/privacy/export",
                    "methods": [
                        "POST"
                    ],
                    "name": "api_user_export_data",
                    "controller": "App\\Controller\\UserController",
                    "action": "exportPortableData",
                    "description": "Generates and returns comprehensive user data export including\nall user content, settings, and account information.",
                    "summary": "Export user data in portable format",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/user/settings/privacy/delete",
                    "methods": [
                        "DELETE"
                    ],
                    "name": "api_user_delete_account",
                    "controller": "App\\Controller\\UserController",
                    "action": "deleteAccount",
                    "description": "Initiates account deletion process which removes all user data,\ncontent, and associated resources permanently.",
                    "summary": "Delete user account and all associated data",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                },
                {
                    "path": "/api/user/subscription",
                    "methods": [
                        "GET"
                    ],
                    "name": "api_user_subscription",
                    "controller": "App\\Controller\\UserController",
                    "action": "getSubscription",
                    "description": "Returns current subscription details including plan type, billing status,\nusage limits, and subscription features for the authenticated user.",
                    "summary": "Get user subscription information",
                    "deprecated": false,
                    "security": [],
                    "tags": [],
                    "parameters": [],
                    "request_body": null,
                    "responses": {
                        "200": {
                            "description": "Success",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "message": "Success"
                            }
                        },
                        "400": {
                            "description": "Bad Request",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Bad Request",
                                "message": "Invalid input data"
                            }
                        },
                        "401": {
                            "description": "Unauthorized",
                            "content_type": "application/json",
                            "schema_class": null,
                            "schema_name": null,
                            "example": {
                                "error": "Unauthorized",
                                "message": "Authentication required"
                            }
                        }
                    }
                }
            ]
        }
    ],
    "schemas": {
        "RegisterRequestDTO": {
            "name": "RegisterRequestDTO",
            "class_name": "App\\DTO\\RegisterRequestDTO",
            "type": "object",
            "description": "Handles new user account creation with validation for all\nrequired fields. Used by the registration system to collect\nand validate user information before creating new accounts\nin the platform.",
            "properties": {
                "email": {
                    "name": "email",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "User's email address",
                    "validation": []
                },
                "password": {
                    "name": "password",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "User's password",
                    "validation": []
                },
                "firstName": {
                    "name": "firstName",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "User's first name",
                    "validation": []
                },
                "lastName": {
                    "name": "lastName",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "User's last name",
                    "validation": []
                },
                "username": {
                    "name": "username",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "User's optional username",
                    "validation": []
                }
            },
            "required": [
                "email",
                "password",
                "firstName",
                "lastName"
            ],
            "example": {
                "email": "example_email",
                "password": "example_password",
                "firstName": "example_firstName",
                "lastName": "example_lastName",
                "username": "example_username"
            }
        },
        "AuthResponseDTO": {
            "name": "AuthResponseDTO",
            "class_name": "App\\DTO\\Response\\AuthResponseDTO",
            "type": "object",
            "description": "Returned by authentication endpoints (login, register, refresh)\nto provide the client with the access token and user information\nneeded for authenticated API requests and UI personalization.",
            "properties": {
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "token": {
                    "name": "token",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "user": {
                    "name": "user",
                    "type": "string",
                    "php_type": "App\\DTO\\Response\\UserResponseDTO",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "success": {
                    "name": "success",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "message",
                "token",
                "user"
            ],
            "example": {
                "message": "example_message",
                "token": "example_token",
                "user": "example_user",
                "success": true,
                "timestamp": "example_timestamp"
            }
        },
        "LoginRequestDTO": {
            "name": "LoginRequestDTO",
            "class_name": "App\\DTO\\LoginRequestDTO",
            "type": "object",
            "description": "Handles user login credentials for JWT token-based authentication.\nUsed by the authentication system to validate user credentials\nand generate access tokens for API authorization.",
            "properties": {
                "email": {
                    "name": "email",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "password": {
                    "name": "password",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "email",
                "password"
            ],
            "example": {
                "email": "example_email",
                "password": "example_password"
            }
        },
        "UserProfileResponseDTO": {
            "name": "UserProfileResponseDTO",
            "class_name": "App\\DTO\\Response\\UserProfileResponseDTO",
            "type": "object",
            "description": "",
            "properties": {
                "user": {
                    "name": "user",
                    "type": "string",
                    "php_type": "App\\DTO\\Response\\UserResponseDTO",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "success": {
                    "name": "success",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "user"
            ],
            "example": {
                "user": "example_user",
                "message": "example_message",
                "success": true,
                "timestamp": "example_timestamp"
            }
        },
        "UpdateProfileRequestDTO": {
            "name": "UpdateProfileRequestDTO",
            "class_name": "App\\DTO\\Request\\UpdateProfileRequestDTO",
            "type": "object",
            "description": "",
            "properties": {
                "firstName": {
                    "name": "firstName",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "lastName": {
                    "name": "lastName",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "username": {
                    "name": "username",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "email": {
                    "name": "email",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "jobTitle": {
                    "name": "jobTitle",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "company": {
                    "name": "company",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "website": {
                    "name": "website",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "portfolio": {
                    "name": "portfolio",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "bio": {
                    "name": "bio",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "socialLinks": {
                    "name": "socialLinks",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "timezone": {
                    "name": "timezone",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "language": {
                    "name": "language",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [],
            "example": {
                "firstName": "example_firstName",
                "lastName": "example_lastName",
                "username": "example_username",
                "email": "example_email",
                "jobTitle": "example_jobTitle",
                "company": "example_company",
                "website": "example_website",
                "portfolio": "example_portfolio",
                "bio": "example_bio",
                "socialLinks": [],
                "timezone": "example_timezone",
                "language": "example_language"
            }
        },
        "ChangePasswordRequestDTO": {
            "name": "ChangePasswordRequestDTO",
            "class_name": "App\\DTO\\Request\\ChangePasswordRequestDTO",
            "type": "object",
            "description": "Handles secure password updates for authenticated users.\nValidates the current password before allowing the change\nand ensures the new password meets security requirements\nwith confirmation validation.",
            "properties": {
                "currentPassword": {
                    "name": "currentPassword",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "newPassword": {
                    "name": "newPassword",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "confirmPassword": {
                    "name": "confirmPassword",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "currentPassword",
                "newPassword",
                "confirmPassword"
            ],
            "example": {
                "currentPassword": "example_currentPassword",
                "newPassword": "example_newPassword",
                "confirmPassword": "example_confirmPassword"
            }
        },
        "SuccessResponseDTO": {
            "name": "SuccessResponseDTO",
            "class_name": "App\\DTO\\Response\\SuccessResponseDTO",
            "type": "object",
            "description": "",
            "properties": {
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "success": {
                    "name": "success",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "message"
            ],
            "example": {
                "message": "example_message",
                "success": true,
                "timestamp": "example_timestamp"
            }
        },
        "PaginatedResponseDTO": {
            "name": "PaginatedResponseDTO",
            "class_name": "App\\DTO\\Response\\PaginatedResponseDTO",
            "type": "object",
            "description": "",
            "properties": {
                "data": {
                    "name": "data",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "page": {
                    "name": "page",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "limit": {
                    "name": "limit",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "total": {
                    "name": "total",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "totalPages": {
                    "name": "totalPages",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "data",
                "page",
                "limit",
                "total",
                "totalPages"
            ],
            "example": {
                "data": [],
                "page": 123,
                "limit": 123,
                "total": 123,
                "totalPages": 123,
                "message": "example_message"
            }
        },
        "CreateDesignRequestDTO": {
            "name": "CreateDesignRequestDTO",
            "class_name": "App\\DTO\\CreateDesignRequestDTO",
            "type": "object",
            "description": "This DTO handles the creation of new designs with specified canvas\ndimensions, initial design settings, and organizational metadata.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Design name is required"
                            }
                        },
                        {
                            "type": "Length",
                            "args": {
                                "min": 1,
                                "max": 255,
                                "minMessage": "Design name must be at least 1 character",
                                "maxMessage": "Design name cannot exceed 255 characters"
                            }
                        }
                    ]
                },
                "description": {
                    "name": "description",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "max": 1000,
                                "maxMessage": "Description cannot exceed 1000 characters"
                            }
                        }
                    ]
                },
                "data": {
                    "name": "data",
                    "type": "string",
                    "php_type": "App\\DTO\\ValueObject\\DesignData",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Valid",
                            "args": []
                        }
                    ]
                },
                "projectId": {
                    "name": "projectId",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "integer",
                                "message": "Project ID must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Project ID must be positive"
                            }
                        }
                    ]
                },
                "width": {
                    "name": "width",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "integer",
                                "message": "Width must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Width must be positive"
                            }
                        },
                        {
                            "type": "Range",
                            "args": {
                                "min": 1,
                                "max": 10000,
                                "notInRangeMessage": "Width must be between 1 and 10000 pixels"
                            }
                        }
                    ]
                },
                "height": {
                    "name": "height",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "integer",
                                "message": "Height must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Height must be positive"
                            }
                        },
                        {
                            "type": "Range",
                            "args": {
                                "min": 1,
                                "max": 10000,
                                "notInRangeMessage": "Height must be between 1 and 10000 pixels"
                            }
                        }
                    ]
                },
                "isPublic": {
                    "name": "isPublic",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "bool",
                                "message": "Is public must be a boolean"
                            }
                        }
                    ]
                }
            },
            "required": [
                "name"
            ],
            "example": {
                "name": "example_name",
                "description": "example_description",
                "data": "example_data",
                "projectId": 123,
                "width": 123,
                "height": 123,
                "isPublic": true
            }
        },
        "DesignResponseDTO": {
            "name": "DesignResponseDTO",
            "class_name": "App\\DTO\\Response\\DesignResponseDTO",
            "type": "object",
            "description": "",
            "properties": {
                "success": {
                    "name": "success",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "design": {
                    "name": "design",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "designs": {
                    "name": "designs",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "total": {
                    "name": "total",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "page": {
                    "name": "page",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "totalPages": {
                    "name": "totalPages",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "php_type": "DateTimeImmutable",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "success",
                "message"
            ],
            "example": {
                "success": true,
                "message": "example_message",
                "design": [],
                "designs": [],
                "total": 123,
                "page": 123,
                "totalPages": 123,
                "timestamp": "example_timestamp"
            }
        },
        "UpdateDesignRequestDTO": {
            "name": "UpdateDesignRequestDTO",
            "class_name": "App\\DTO\\UpdateDesignRequestDTO",
            "type": "object",
            "description": "This DTO handles partial updates to designs, allowing clients to\nupdate only the fields they want to change. All fields are optional\nand null values indicate no change should be made.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "min": 1,
                                "max": 255,
                                "minMessage": "Design name must be at least 1 character",
                                "maxMessage": "Design name cannot exceed 255 characters"
                            }
                        }
                    ]
                },
                "description": {
                    "name": "description",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "max": 1000,
                                "maxMessage": "Description cannot exceed 1000 characters"
                            }
                        }
                    ]
                },
                "data": {
                    "name": "data",
                    "type": "string",
                    "php_type": "App\\DTO\\ValueObject\\DesignData",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Valid",
                            "args": []
                        }
                    ]
                },
                "projectId": {
                    "name": "projectId",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "integer",
                                "message": "Project ID must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Project ID must be positive"
                            }
                        }
                    ]
                },
                "width": {
                    "name": "width",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "integer",
                                "message": "Width must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Width must be positive"
                            }
                        },
                        {
                            "type": "Range",
                            "args": {
                                "min": 1,
                                "max": 10000,
                                "notInRangeMessage": "Width must be between 1 and 10000 pixels"
                            }
                        }
                    ]
                },
                "height": {
                    "name": "height",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "integer",
                                "message": "Height must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Height must be positive"
                            }
                        },
                        {
                            "type": "Range",
                            "args": {
                                "min": 1,
                                "max": 10000,
                                "notInRangeMessage": "Height must be between 1 and 10000 pixels"
                            }
                        }
                    ]
                },
                "isPublic": {
                    "name": "isPublic",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "bool",
                                "message": "Is public must be a boolean"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "name": "example_name",
                "description": "example_description",
                "data": "example_data",
                "projectId": 123,
                "width": 123,
                "height": 123,
                "isPublic": true
            }
        },
        "DuplicateDesignRequestDTO": {
            "name": "DuplicateDesignRequestDTO",
            "class_name": "App\\DTO\\DuplicateDesignRequestDTO",
            "type": "object",
            "description": "Handles the duplication of complete designs including all layers,\nsettings, and metadata. Used by the design management system to\ncreate copies of existing designs with optional customization\nof the duplicate's name and target project.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "min": 1,
                                "max": 255,
                                "minMessage": "Design name must be at least 1 character",
                                "maxMessage": "Design name cannot exceed 255 characters"
                            }
                        }
                    ]
                },
                "projectId": {
                    "name": "projectId",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "integer",
                                "message": "Project ID must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Project ID must be positive"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "name": "example_name",
                "projectId": 123
            }
        },
        "UpdateDesignThumbnailRequestDTO": {
            "name": "UpdateDesignThumbnailRequestDTO",
            "class_name": "App\\DTO\\UpdateDesignThumbnailRequestDTO",
            "type": "object",
            "description": "Handles updating the thumbnail image for an existing design.\nUsed when users want to change the preview image that represents\ntheir design in galleries, project lists, and search results.",
            "properties": {
                "thumbnail": {
                    "name": "thumbnail",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Thumbnail URL is required"
                            }
                        },
                        {
                            "type": "Url",
                            "args": {
                                "message": "Thumbnail must be a valid URL"
                            }
                        }
                    ]
                }
            },
            "required": [
                "thumbnail"
            ],
            "example": {
                "thumbnail": "example_thumbnail"
            }
        },
        "ExportJobResponseDTO": {
            "name": "ExportJobResponseDTO",
            "class_name": "App\\DTO\\Response\\ExportJobResponseDTO",
            "type": "object",
            "description": "",
            "properties": {
                "success": {
                    "name": "success",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "job": {
                    "name": "job",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "jobs": {
                    "name": "jobs",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "total": {
                    "name": "total",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "page": {
                    "name": "page",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "totalPages": {
                    "name": "totalPages",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "php_type": "DateTimeImmutable",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "success",
                "message"
            ],
            "example": {
                "success": true,
                "message": "example_message",
                "job": [],
                "jobs": [],
                "total": 123,
                "page": 123,
                "totalPages": 123,
                "timestamp": "example_timestamp"
            }
        },
        "CreateExportJobRequestDTO": {
            "name": "CreateExportJobRequestDTO",
            "class_name": "App\\DTO\\Request\\CreateExportJobRequestDTO",
            "type": "object",
            "description": "Handles the submission of design export jobs to the background\nprocessing system. Supports multiple output formats and quality\nsettings for rendering designs to various file types including\nstatic images, PDFs, and animated formats.",
            "properties": {
                "designId": {
                    "name": "designId",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Design ID is required"
                            }
                        },
                        {
                            "type": "Type",
                            "args": {
                                "type": "integer",
                                "message": "Design ID must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Design ID must be positive"
                            }
                        }
                    ]
                },
                "format": {
                    "name": "format",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Format is required"
                            }
                        },
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "png",
                                    "jpeg",
                                    "svg",
                                    "pdf",
                                    "mp4",
                                    "gif"
                                ],
                                "message": "Invalid format"
                            }
                        }
                    ]
                },
                "quality": {
                    "name": "quality",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "low",
                                    "medium",
                                    "high",
                                    "ultra"
                                ],
                                "message": "Invalid quality"
                            }
                        }
                    ]
                },
                "width": {
                    "name": "width",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "integer",
                                "message": "Width must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Width must be positive"
                            }
                        }
                    ]
                },
                "height": {
                    "name": "height",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "integer",
                                "message": "Height must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Height must be positive"
                            }
                        }
                    ]
                },
                "scale": {
                    "name": "scale",
                    "type": "number",
                    "php_type": "float",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "float",
                                "message": "Scale must be a number"
                            }
                        },
                        {
                            "type": "PositiveOrZero",
                            "args": {
                                "message": "Scale must be positive or zero"
                            }
                        }
                    ]
                },
                "transparent": {
                    "name": "transparent",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "bool",
                                "message": "Transparent must be a boolean"
                            }
                        }
                    ]
                },
                "backgroundColor": {
                    "name": "backgroundColor",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "string",
                                "message": "Background color must be a string"
                            }
                        }
                    ]
                },
                "animationSettings": {
                    "name": "animationSettings",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "array",
                                "message": "Animation settings must be an array"
                            }
                        }
                    ]
                }
            },
            "required": [
                "designId"
            ],
            "example": {
                "designId": 123,
                "format": "example_format",
                "quality": "example_quality",
                "width": 123,
                "height": 123,
                "scale": 123.45,
                "transparent": true,
                "backgroundColor": "example_backgroundColor",
                "animationSettings": []
            }
        },
        "ErrorResponseDTO": {
            "name": "ErrorResponseDTO",
            "class_name": "App\\DTO\\Response\\ErrorResponseDTO",
            "type": "object",
            "description": "",
            "properties": {
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "details": {
                    "name": "details",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "code": {
                    "name": "code",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "message"
            ],
            "example": {
                "message": "example_message",
                "details": [],
                "code": "example_code",
                "timestamp": "example_timestamp"
            }
        },
        "CreateLayerRequestDTO": {
            "name": "CreateLayerRequestDTO",
            "class_name": "App\\DTO\\CreateLayerRequestDTO",
            "type": "object",
            "description": "Handles the creation of new design layers with all necessary properties\nfor proper initialization in the canvas editor. Supports all layer types\nincluding text, image, shape, group, video, and audio layers.",
            "properties": {
                "designId": {
                    "name": "designId",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Design ID is required"
                            }
                        },
                        {
                            "type": "Type",
                            "args": {
                                "type": "string",
                                "message": "Design ID must be a string"
                            }
                        }
                    ]
                },
                "type": {
                    "name": "type",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Layer type is required"
                            }
                        },
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "text",
                                    "image",
                                    "shape",
                                    "group",
                                    "video",
                                    "audio"
                                ],
                                "message": "Invalid layer type. Must be one of: text, image, shape, group, video, audio"
                            }
                        }
                    ]
                },
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Layer name is required"
                            }
                        },
                        {
                            "type": "Length",
                            "args": {
                                "max": 255,
                                "maxMessage": "Layer name cannot be longer than 255 characters"
                            }
                        }
                    ]
                },
                "properties": {
                    "name": "properties",
                    "type": "string",
                    "php_type": "mixed",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "transform": {
                    "name": "transform",
                    "type": "string",
                    "php_type": "App\\DTO\\ValueObject\\Transform",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "zIndex": {
                    "name": "zIndex",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "integer",
                                "message": "Z-index must be an integer"
                            }
                        },
                        {
                            "type": "PositiveOrZero",
                            "args": {
                                "message": "Z-index must be positive or zero"
                            }
                        }
                    ]
                },
                "visible": {
                    "name": "visible",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "boolean",
                                "message": "Visible must be a boolean"
                            }
                        }
                    ]
                },
                "locked": {
                    "name": "locked",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "boolean",
                                "message": "Locked must be a boolean"
                            }
                        }
                    ]
                },
                "parentLayerId": {
                    "name": "parentLayerId",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "string",
                                "message": "Parent layer ID must be a string"
                            }
                        }
                    ]
                }
            },
            "required": [
                "designId",
                "type",
                "name",
                "properties",
                "transform"
            ],
            "example": {
                "designId": "example_designId",
                "type": "example_type",
                "name": "example_name",
                "properties": "example_properties",
                "transform": "example_transform",
                "zIndex": 123,
                "visible": true,
                "locked": true,
                "parentLayerId": "example_parentLayerId"
            }
        },
        "LayerResponseDTO": {
            "name": "LayerResponseDTO",
            "class_name": "App\\DTO\\Response\\LayerResponseDTO",
            "type": "object",
            "description": "",
            "properties": {
                "success": {
                    "name": "success",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "layer": {
                    "name": "layer",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "layers": {
                    "name": "layers",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "php_type": "DateTimeImmutable",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "success",
                "message"
            ],
            "example": {
                "success": true,
                "message": "example_message",
                "layer": [],
                "layers": [],
                "timestamp": "example_timestamp"
            }
        },
        "UpdateLayerRequestDTO": {
            "name": "UpdateLayerRequestDTO",
            "class_name": "App\\DTO\\UpdateLayerRequestDTO",
            "type": "object",
            "description": "Handles modification of existing design layers including visual properties,\npositioning, visibility, and hierarchy changes. All fields are optional\nto support partial updates of layer attributes.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "max": 255,
                                "maxMessage": "Layer name cannot be longer than 255 characters"
                            }
                        }
                    ]
                },
                "properties": {
                    "name": "properties",
                    "type": "string",
                    "php_type": "mixed",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "transform": {
                    "name": "transform",
                    "type": "string",
                    "php_type": "App\\DTO\\ValueObject\\Transform",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "zIndex": {
                    "name": "zIndex",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "integer",
                                "message": "Z-index must be an integer"
                            }
                        },
                        {
                            "type": "PositiveOrZero",
                            "args": {
                                "message": "Z-index must be positive or zero"
                            }
                        }
                    ]
                },
                "visible": {
                    "name": "visible",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "boolean",
                                "message": "Visible must be a boolean"
                            }
                        }
                    ]
                },
                "locked": {
                    "name": "locked",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "boolean",
                                "message": "Locked must be a boolean"
                            }
                        }
                    ]
                },
                "parentLayerId": {
                    "name": "parentLayerId",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "string",
                                "message": "Parent layer ID must be a string"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "name": "example_name",
                "properties": "example_properties",
                "transform": "example_transform",
                "zIndex": 123,
                "visible": true,
                "locked": true,
                "parentLayerId": "example_parentLayerId"
            }
        },
        "DuplicateLayerRequestDTO": {
            "name": "DuplicateLayerRequestDTO",
            "class_name": "App\\DTO\\DuplicateLayerRequestDTO",
            "type": "object",
            "description": "Handles the duplication of design layers with optional customization\nof the duplicate layer name and target design. Used by the layer\nmanagement system to create copies of existing layers within the\nsame design or across different designs.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "max": 255,
                                "maxMessage": "New layer name cannot be longer than 255 characters"
                            }
                        }
                    ]
                },
                "targetDesignId": {
                    "name": "targetDesignId",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "string",
                                "message": "Target design ID must be a string"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "name": "example_name",
                "targetDesignId": "example_targetDesignId"
            }
        },
        "MoveLayerRequestDTO": {
            "name": "MoveLayerRequestDTO",
            "class_name": "App\\DTO\\MoveLayerRequestDTO",
            "type": "object",
            "description": "Handles repositioning of layers within the design canvas z-order.\nSupports both relative movements (up/down/top/bottom) and absolute\npositioning via z-index targeting. Used in the layer management\nsystem to control layer stacking order and visual hierarchy.",
            "properties": {
                "direction": {
                    "name": "direction",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "up",
                                    "down",
                                    "top",
                                    "bottom"
                                ],
                                "message": "Direction must be one of: up, down, top, bottom"
                            }
                        }
                    ]
                },
                "targetZIndex": {
                    "name": "targetZIndex",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "integer",
                                "message": "Target Z-index must be an integer"
                            }
                        },
                        {
                            "type": "PositiveOrZero",
                            "args": {
                                "message": "Target Z-index must be positive or zero"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "direction": "example_direction",
                "targetZIndex": 123
            }
        },
        "BulkUpdateLayersRequestDTO": {
            "name": "BulkUpdateLayersRequestDTO",
            "class_name": "App\\DTO\\BulkUpdateLayersRequestDTO",
            "type": "object",
            "description": "This DTO handles batch operations for updating layer properties, allowing\nefficient modification of multiple layers in a single API call. Each layer\nupdate includes the layer ID and the specific changes to apply.",
            "properties": {
                "layers": {
                    "name": "layers",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "layers"
            ],
            "example": {
                "layers": []
            }
        },
        "SearchMediaRequestDTO": {
            "name": "SearchMediaRequestDTO",
            "class_name": "App\\DTO\\SearchMediaRequestDTO",
            "type": "object",
            "description": "Handles search operations for media files with advanced filtering\ncapabilities including type, source, pagination, and tag-based\nfiltering. Used by the media library to provide rich search\nfunctionality for users to find specific media files.",
            "properties": {
                "page": {
                    "name": "page",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Range",
                            "args": {
                                "min": 1,
                                "notInRangeMessage": "Page must be {{ min }} or greater"
                            }
                        }
                    ]
                },
                "limit": {
                    "name": "limit",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Range",
                            "args": {
                                "min": 1,
                                "max": 50,
                                "notInRangeMessage": "Limit must be between {{ min }} and {{ max }}"
                            }
                        }
                    ]
                },
                "type": {
                    "name": "type",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "image",
                                    "video",
                                    "audio"
                                ],
                                "message": "Type must be one of: image, video, audio"
                            }
                        }
                    ]
                },
                "source": {
                    "name": "source",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "upload",
                                    "unsplash",
                                    "pexels",
                                    "pixabay"
                                ],
                                "message": "Source must be one of: upload, unsplash, pexels, pixabay"
                            }
                        }
                    ]
                },
                "search": {
                    "name": "search",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "max": 255,
                                "maxMessage": "Search query cannot be longer than {{ limit }} characters"
                            }
                        }
                    ]
                },
                "tags": {
                    "name": "tags",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [],
            "example": {
                "page": 123,
                "limit": 123,
                "type": "example_type",
                "source": "example_source",
                "search": "example_search",
                "tags": "example_tags"
            }
        },
        "MediaResponseDTO": {
            "name": "MediaResponseDTO",
            "class_name": "App\\DTO\\Response\\MediaResponseDTO",
            "type": "object",
            "description": "",
            "properties": {
                "success": {
                    "name": "success",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "media": {
                    "name": "media",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "mediaList": {
                    "name": "mediaList",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "total": {
                    "name": "total",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "page": {
                    "name": "page",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "totalPages": {
                    "name": "totalPages",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "php_type": "DateTimeImmutable",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "success",
                "message"
            ],
            "example": {
                "success": true,
                "message": "example_message",
                "media": [],
                "mediaList": [],
                "total": 123,
                "page": 123,
                "totalPages": 123,
                "timestamp": "example_timestamp"
            }
        },
        "CreateMediaRequestDTO": {
            "name": "CreateMediaRequestDTO",
            "class_name": "App\\DTO\\CreateMediaRequestDTO",
            "type": "object",
            "description": "This DTO handles the creation of media assets including images, videos,\nand audio files from various sources (uploads, stock photo APIs, etc.).\nIncludes comprehensive metadata and organizational features.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Media name is required"
                            }
                        },
                        {
                            "type": "Length",
                            "args": {
                                "min": 1,
                                "max": 255,
                                "minMessage": "Media name must be at least {{ limit }} character long",
                                "maxMessage": "Media name cannot be longer than {{ limit }} characters"
                            }
                        }
                    ]
                },
                "type": {
                    "name": "type",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Media type is required"
                            }
                        },
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "image",
                                    "video",
                                    "audio"
                                ],
                                "message": "Type must be one of: image, video, audio"
                            }
                        }
                    ]
                },
                "mimeType": {
                    "name": "mimeType",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "MIME type is required"
                            }
                        }
                    ]
                },
                "size": {
                    "name": "size",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "PositiveOrZero",
                            "args": {
                                "message": "Size must be a positive number"
                            }
                        }
                    ]
                },
                "url": {
                    "name": "url",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "URL is required"
                            }
                        },
                        {
                            "type": "Url",
                            "args": {
                                "message": "URL must be a valid URL"
                            }
                        }
                    ]
                },
                "thumbnailUrl": {
                    "name": "thumbnailUrl",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Url",
                            "args": {
                                "message": "Thumbnail URL must be a valid URL"
                            }
                        }
                    ]
                },
                "width": {
                    "name": "width",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "PositiveOrZero",
                            "args": {
                                "message": "Width must be a positive number"
                            }
                        }
                    ]
                },
                "height": {
                    "name": "height",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "PositiveOrZero",
                            "args": {
                                "message": "Height must be a positive number"
                            }
                        }
                    ]
                },
                "duration": {
                    "name": "duration",
                    "type": "number",
                    "php_type": "float",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "PositiveOrZero",
                            "args": {
                                "message": "Duration must be a positive number"
                            }
                        }
                    ]
                },
                "source": {
                    "name": "source",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "upload",
                                    "unsplash",
                                    "pexels",
                                    "pixabay"
                                ],
                                "message": "Source must be one of: upload, unsplash, pexels, pixabay"
                            }
                        }
                    ]
                },
                "sourceId": {
                    "name": "sourceId",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "metadata": {
                    "name": "metadata",
                    "type": "string",
                    "php_type": "App\\DTO\\ValueObject\\MediaMetadata",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Valid",
                            "args": []
                        }
                    ]
                },
                "tags": {
                    "name": "tags",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Valid",
                            "args": []
                        }
                    ]
                },
                "attribution": {
                    "name": "attribution",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "license": {
                    "name": "license",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "isPremium": {
                    "name": "isPremium",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "bool",
                                "message": "isPremium must be a boolean"
                            }
                        }
                    ]
                },
                "isActive": {
                    "name": "isActive",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "bool",
                                "message": "isActive must be a boolean"
                            }
                        }
                    ]
                }
            },
            "required": [
                "name",
                "type",
                "mimeType",
                "size",
                "url"
            ],
            "example": {
                "name": "example_name",
                "type": "example_type",
                "mimeType": "example_mimeType",
                "size": 123,
                "url": "example_url",
                "thumbnailUrl": "example_thumbnailUrl",
                "width": 123,
                "height": 123,
                "duration": 123.45,
                "source": "example_source",
                "sourceId": "example_sourceId",
                "metadata": "example_metadata",
                "tags": [],
                "attribution": "example_attribution",
                "license": "example_license",
                "isPremium": true,
                "isActive": true
            }
        },
        "UpdateMediaRequestDTO": {
            "name": "UpdateMediaRequestDTO",
            "class_name": "App\\DTO\\UpdateMediaRequestDTO",
            "type": "object",
            "description": "This DTO handles partial updates to media assets, allowing clients to\nupdate only the fields they want to change. All fields are optional\nand null values indicate no change should be made.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "min": 1,
                                "max": 255,
                                "minMessage": "File name must be at least 1 character",
                                "maxMessage": "File name cannot exceed 255 characters"
                            }
                        }
                    ]
                },
                "description": {
                    "name": "description",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "max": 1000,
                                "maxMessage": "Description cannot exceed 1000 characters"
                            }
                        }
                    ]
                },
                "tags": {
                    "name": "tags",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Valid",
                            "args": []
                        }
                    ]
                },
                "metadata": {
                    "name": "metadata",
                    "type": "string",
                    "php_type": "App\\DTO\\ValueObject\\MediaMetadata",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Valid",
                            "args": []
                        }
                    ]
                },
                "isPremium": {
                    "name": "isPremium",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "bool",
                                "message": "Is premium must be a boolean"
                            }
                        }
                    ]
                },
                "isActive": {
                    "name": "isActive",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "bool",
                                "message": "Is active must be a boolean"
                            }
                        }
                    ]
                },
                "isPublic": {
                    "name": "isPublic",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "bool",
                                "message": "Is public must be a boolean"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "name": "example_name",
                "description": "example_description",
                "tags": [],
                "metadata": "example_metadata",
                "isPremium": true,
                "isActive": true,
                "isPublic": true
            }
        },
        "DuplicateMediaRequestDTO": {
            "name": "DuplicateMediaRequestDTO",
            "class_name": "App\\DTO\\DuplicateMediaRequestDTO",
            "type": "object",
            "description": "Handles the duplication of media files including images, videos,\nand other assets. Creates a personal copy of accessible media\nfiles for the authenticated user with optional name customization.\nUsed by the media library for creating user-owned copies of media.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "max": 255,
                                "maxMessage": "Media name cannot be longer than {{ limit }} characters"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "name": "example_name"
            }
        },
        "StockSearchRequestDTO": {
            "name": "StockSearchRequestDTO",
            "class_name": "App\\DTO\\StockSearchRequestDTO",
            "type": "object",
            "description": "Handles search operations for stock media from external providers\nlike Unsplash, Pexels, and Pixabay. Provides structured search\nparameters for integrating with third-party stock media APIs\nto expand the available media library for users.",
            "properties": {
                "query": {
                    "name": "query",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Query is required for stock search"
                            }
                        },
                        {
                            "type": "Length",
                            "args": {
                                "min": 1,
                                "max": 255,
                                "minMessage": "Query must be at least {{ limit }} character long",
                                "maxMessage": "Query cannot be longer than {{ limit }} characters"
                            }
                        }
                    ]
                },
                "page": {
                    "name": "page",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Range",
                            "args": {
                                "min": 1,
                                "notInRangeMessage": "Page must be {{ min }} or greater"
                            }
                        }
                    ]
                },
                "limit": {
                    "name": "limit",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Range",
                            "args": {
                                "min": 1,
                                "max": 50,
                                "notInRangeMessage": "Limit must be between {{ min }} and {{ max }}"
                            }
                        }
                    ]
                },
                "type": {
                    "name": "type",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "image",
                                    "video"
                                ],
                                "message": "Type must be one of: image, video"
                            }
                        }
                    ]
                },
                "source": {
                    "name": "source",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "unsplash",
                                    "pexels",
                                    "pixabay"
                                ],
                                "message": "Source must be one of: unsplash, pexels, pixabay"
                            }
                        }
                    ]
                }
            },
            "required": [
                "query"
            ],
            "example": {
                "query": "example_query",
                "page": 123,
                "limit": 123,
                "type": "example_type",
                "source": "example_source"
            }
        },
        "BulkDeleteMediaRequestDTO": {
            "name": "BulkDeleteMediaRequestDTO",
            "class_name": "App\\DTO\\BulkDeleteMediaRequestDTO",
            "type": "object",
            "description": "Handles bulk deletion of multiple media files by their UUIDs.\nUsed by the media management system to allow users to delete\nmultiple media files in a single operation with validation\nand permission checks.",
            "properties": {
                "uuids": {
                    "name": "uuids",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "UUIDs are required"
                            }
                        },
                        {
                            "type": "Type",
                            "args": {
                                "0": "array",
                                "message": "UUIDs must be an array"
                            }
                        },
                        {
                            "type": "Count",
                            "args": {
                                "min": 1,
                                "max": 100,
                                "minMessage": "At least one UUID is required",
                                "maxMessage": "Cannot delete more than 100 items at once"
                            }
                        },
                        {
                            "type": "All",
                            "args": [
                                [
                                    {
                                        "payload": null,
                                        "message": "UUID cannot be empty",
                                        "allowNull": false,
                                        "normalizer": null
                                    },
                                    {
                                        "payload": null,
                                        "message": "Invalid UUID format",
                                        "strict": true,
                                        "versions": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8
                                        ],
                                        "normalizer": null
                                    }
                                ]
                            ]
                        }
                    ]
                }
            },
            "required": [
                "uuids"
            ],
            "example": {
                "uuids": []
            }
        },
        "CreatePluginRequestDTO": {
            "name": "CreatePluginRequestDTO",
            "class_name": "App\\DTO\\Request\\CreatePluginRequestDTO",
            "type": "object",
            "description": "Handles the submission of new plugins to the platform's plugin\nsystem. Contains all necessary metadata and configuration for\nplugin registration, validation, and eventual approval process.\nUsed in the plugin management system to onboard new extensions.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Plugin name is required"
                            }
                        },
                        {
                            "type": "Length",
                            "args": {
                                "min": 2,
                                "max": 100,
                                "minMessage": "Plugin name must be at least 2 characters long",
                                "maxMessage": "Plugin name cannot exceed 100 characters"
                            }
                        }
                    ]
                },
                "description": {
                    "name": "description",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Plugin description is required"
                            }
                        },
                        {
                            "type": "Length",
                            "args": {
                                "min": 10,
                                "max": 1000,
                                "minMessage": "Plugin description must be at least 10 characters long",
                                "maxMessage": "Plugin description cannot exceed 1000 characters"
                            }
                        }
                    ]
                },
                "categories": {
                    "name": "categories",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Categories are required"
                            }
                        },
                        {
                            "type": "Count",
                            "args": {
                                "min": 1,
                                "max": 5,
                                "minMessage": "At least one category is required",
                                "maxMessage": "Cannot exceed 5 categories"
                            }
                        },
                        {
                            "type": "All",
                            "args": [
                                [
                                    {
                                        "payload": null,
                                        "message": "Category cannot be empty",
                                        "allowNull": false,
                                        "normalizer": null
                                    },
                                    {
                                        "payload": null,
                                        "maxMessage": "Category name cannot exceed 50 characters",
                                        "minMessage": "This value is too short. It should have {{ limit }} character or more.|This value is too short. It should have {{ limit }} characters or more.",
                                        "exactMessage": "This value should have exactly {{ limit }} character.|This value should have exactly {{ limit }} characters.",
                                        "charsetMessage": "This value does not match the expected {{ charset }} charset.",
                                        "max": 50,
                                        "min": null,
                                        "charset": "UTF-8",
                                        "normalizer": null,
                                        "countUnit": "codepoints"
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "version": {
                    "name": "version",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Plugin version is required"
                            }
                        },
                        {
                            "type": "Regex",
                            "args": {
                                "pattern": "/^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9-]+)?$/",
                                "message": "Version must follow semantic versioning (e.g., 1.0.0)"
                            }
                        }
                    ]
                },
                "permissions": {
                    "name": "permissions",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Permissions are required"
                            }
                        },
                        {
                            "type": "Count",
                            "args": {
                                "min": 1,
                                "minMessage": "At least one permission is required"
                            }
                        },
                        {
                            "type": "All",
                            "args": [
                                [
                                    {
                                        "payload": null,
                                        "choices": [
                                            "editor",
                                            "filesystem",
                                            "network",
                                            "clipboard",
                                            "notifications"
                                        ],
                                        "callback": null,
                                        "multiple": false,
                                        "strict": true,
                                        "min": null,
                                        "max": null,
                                        "message": "Invalid permission type",
                                        "multipleMessage": "One or more of the given values is invalid.",
                                        "minMessage": "You must select at least {{ limit }} choice.|You must select at least {{ limit }} choices.",
                                        "maxMessage": "You must select at most {{ limit }} choice.|You must select at most {{ limit }} choices.",
                                        "match": true
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "manifest": {
                    "name": "manifest",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Plugin manifest is required"
                            }
                        },
                        {
                            "type": "Type",
                            "args": {
                                "type": "array",
                                "message": "Manifest must be a valid array"
                            }
                        }
                    ]
                }
            },
            "required": [
                "name",
                "description",
                "categories",
                "version",
                "permissions",
                "manifest"
            ],
            "example": {
                "name": "example_name",
                "description": "example_description",
                "categories": [],
                "version": "example_version",
                "permissions": [],
                "manifest": []
            }
        },
        "UpdatePluginRequestDTO": {
            "name": "UpdatePluginRequestDTO",
            "class_name": "App\\DTO\\Request\\UpdatePluginRequestDTO",
            "type": "object",
            "description": "Handles partial updates to existing plugins in the platform's\nplugin system. All fields are optional and null values indicate\nno change should be made. Used for both plugin developer updates\nand administrative status changes.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "min": 2,
                                "max": 100,
                                "minMessage": "Plugin name must be at least 2 characters long",
                                "maxMessage": "Plugin name cannot exceed 100 characters"
                            }
                        }
                    ]
                },
                "description": {
                    "name": "description",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "min": 10,
                                "max": 1000,
                                "minMessage": "Plugin description must be at least 10 characters long",
                                "maxMessage": "Plugin description cannot exceed 1000 characters"
                            }
                        }
                    ]
                },
                "categories": {
                    "name": "categories",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Count",
                            "args": {
                                "min": 1,
                                "max": 5,
                                "minMessage": "At least one category is required",
                                "maxMessage": "Cannot exceed 5 categories"
                            }
                        },
                        {
                            "type": "All",
                            "args": [
                                [
                                    {
                                        "payload": null,
                                        "message": "Category cannot be empty",
                                        "allowNull": false,
                                        "normalizer": null
                                    },
                                    {
                                        "payload": null,
                                        "maxMessage": "Category name cannot exceed 50 characters",
                                        "minMessage": "This value is too short. It should have {{ limit }} character or more.|This value is too short. It should have {{ limit }} characters or more.",
                                        "exactMessage": "This value should have exactly {{ limit }} character.|This value should have exactly {{ limit }} characters.",
                                        "charsetMessage": "This value does not match the expected {{ charset }} charset.",
                                        "max": 50,
                                        "min": null,
                                        "charset": "UTF-8",
                                        "normalizer": null,
                                        "countUnit": "codepoints"
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "version": {
                    "name": "version",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Regex",
                            "args": {
                                "pattern": "/^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9-]+)?$/",
                                "message": "Version must follow semantic versioning (e.g., 1.0.0)"
                            }
                        }
                    ]
                },
                "permissions": {
                    "name": "permissions",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "All",
                            "args": [
                                [
                                    {
                                        "payload": null,
                                        "choices": [
                                            "editor",
                                            "filesystem",
                                            "network",
                                            "clipboard",
                                            "notifications"
                                        ],
                                        "callback": null,
                                        "multiple": false,
                                        "strict": true,
                                        "min": null,
                                        "max": null,
                                        "message": "Invalid permission type",
                                        "multipleMessage": "One or more of the given values is invalid.",
                                        "minMessage": "You must select at least {{ limit }} choice.|You must select at least {{ limit }} choices.",
                                        "maxMessage": "You must select at most {{ limit }} choice.|You must select at most {{ limit }} choices.",
                                        "match": true
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "manifest": {
                    "name": "manifest",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "array",
                                "message": "Manifest must be a valid array"
                            }
                        }
                    ]
                },
                "status": {
                    "name": "status",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "pending",
                                    "approved",
                                    "rejected"
                                ],
                                "message": "Invalid status. Must be pending, approved, or rejected"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "name": "example_name",
                "description": "example_description",
                "categories": [],
                "version": "example_version",
                "permissions": [],
                "manifest": [],
                "status": "example_status"
            }
        },
        "UploadPluginFileRequestDTO": {
            "name": "UploadPluginFileRequestDTO",
            "class_name": "App\\DTO\\Request\\UploadPluginFileRequestDTO",
            "type": "object",
            "description": "Handles validation and encapsulation of plugin file upload data including\nfile type validation, size constraints, and security checks for plugin files.",
            "properties": {
                "file": {
                    "name": "file",
                    "type": "string",
                    "php_type": "Symfony\\Component\\HttpFoundation\\File\\UploadedFile",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotNull",
                            "args": {
                                "message": "Plugin file is required"
                            }
                        },
                        {
                            "type": "File",
                            "args": {
                                "maxSize": "50M",
                                "maxSizeMessage": "Plugin file size cannot exceed 50MB",
                                "mimeTypes": [
                                    "application/zip",
                                    "application/x-zip-compressed",
                                    "application/x-zip"
                                ],
                                "mimeTypesMessage": "Plugin file must be a valid ZIP archive"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "file": "example_file"
            }
        },
        "RejectPluginRequestDTO": {
            "name": "RejectPluginRequestDTO",
            "class_name": "App\\DTO\\Request\\RejectPluginRequestDTO",
            "type": "object",
            "description": "",
            "properties": {
                "reason": {
                    "name": "reason",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Rejection reason is required"
                            }
                        },
                        {
                            "type": "Length",
                            "args": {
                                "min": 10,
                                "max": 500,
                                "minMessage": "Rejection reason must be at least 10 characters long",
                                "maxMessage": "Rejection reason cannot exceed 500 characters"
                            }
                        }
                    ]
                }
            },
            "required": [
                "reason"
            ],
            "example": {
                "reason": "example_reason"
            }
        },
        "CreateProjectRequestDTO": {
            "name": "CreateProjectRequestDTO",
            "class_name": "App\\DTO\\CreateProjectRequestDTO",
            "type": "object",
            "description": "This DTO handles the creation of new projects with all necessary\nconfiguration options, including canvas settings, metadata, and\norganizational tags.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Project name is required"
                            }
                        },
                        {
                            "type": "Length",
                            "args": {
                                "min": 1,
                                "max": 255,
                                "minMessage": "Project name must be at least 1 character",
                                "maxMessage": "Project name cannot exceed 255 characters"
                            }
                        }
                    ]
                },
                "description": {
                    "name": "description",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "max": 1000,
                                "maxMessage": "Description cannot exceed 1000 characters"
                            }
                        }
                    ]
                },
                "isPublic": {
                    "name": "isPublic",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "bool",
                                "message": "Is public must be a boolean"
                            }
                        }
                    ]
                },
                "settings": {
                    "name": "settings",
                    "type": "string",
                    "php_type": "App\\DTO\\ValueObject\\ProjectSettings",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "Valid",
                            "args": []
                        }
                    ]
                },
                "tags": {
                    "name": "tags",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Valid",
                            "args": []
                        }
                    ]
                },
                "thumbnail": {
                    "name": "thumbnail",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Url",
                            "args": {
                                "message": "Thumbnail must be a valid URL"
                            }
                        }
                    ]
                }
            },
            "required": [
                "name",
                "description",
                "isPublic",
                "settings"
            ],
            "example": {
                "name": "example_name",
                "description": "example_description",
                "isPublic": true,
                "settings": "example_settings",
                "tags": [],
                "thumbnail": "example_thumbnail"
            }
        },
        "ProjectResponseDTO": {
            "name": "ProjectResponseDTO",
            "class_name": "App\\DTO\\Response\\ProjectResponseDTO",
            "type": "object",
            "description": "",
            "properties": {
                "success": {
                    "name": "success",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "project": {
                    "name": "project",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "projects": {
                    "name": "projects",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "total": {
                    "name": "total",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "page": {
                    "name": "page",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "totalPages": {
                    "name": "totalPages",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "php_type": "DateTimeImmutable",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "success",
                "message"
            ],
            "example": {
                "success": true,
                "message": "example_message",
                "project": [],
                "projects": [],
                "total": 123,
                "page": 123,
                "totalPages": 123,
                "timestamp": "example_timestamp"
            }
        },
        "UpdateProjectRequestDTO": {
            "name": "UpdateProjectRequestDTO",
            "class_name": "App\\DTO\\UpdateProjectRequestDTO",
            "type": "object",
            "description": "This DTO handles partial updates to projects, allowing clients to\nupdate only the fields they want to change. All fields are optional\nand null values indicate no change should be made.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "min": 1,
                                "max": 255,
                                "minMessage": "Project name must be at least 1 character",
                                "maxMessage": "Project name cannot exceed 255 characters"
                            }
                        }
                    ]
                },
                "description": {
                    "name": "description",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "max": 1000,
                                "maxMessage": "Description cannot exceed 1000 characters"
                            }
                        }
                    ]
                },
                "isPublic": {
                    "name": "isPublic",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "0": "bool",
                                "message": "Is public must be a boolean"
                            }
                        }
                    ]
                },
                "settings": {
                    "name": "settings",
                    "type": "string",
                    "php_type": "App\\DTO\\ValueObject\\ProjectSettings",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Valid",
                            "args": []
                        }
                    ]
                },
                "tags": {
                    "name": "tags",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Valid",
                            "args": []
                        }
                    ]
                },
                "thumbnail": {
                    "name": "thumbnail",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Url",
                            "args": {
                                "message": "Thumbnail must be a valid URL"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "name": "example_name",
                "description": "example_description",
                "isPublic": true,
                "settings": "example_settings",
                "tags": [],
                "thumbnail": "example_thumbnail"
            }
        },
        "DuplicateProjectRequestDTO": {
            "name": "DuplicateProjectRequestDTO",
            "class_name": "App\\DTO\\DuplicateProjectRequestDTO",
            "type": "object",
            "description": "Handles the creation of a complete copy of an existing project\nincluding all associated designs, layers, and metadata. Used\nin the project management system to allow users to quickly\ncreate new projects based on existing templates.",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Project name is required"
                            }
                        },
                        {
                            "type": "Length",
                            "args": {
                                "min": 1,
                                "max": 255,
                                "minMessage": "Project name must be at least {{ limit }} characters long",
                                "maxMessage": "Project name cannot be longer than {{ limit }} characters"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "name": "example_name"
            }
        },
        "SearchProjectsRequestDTO": {
            "name": "SearchProjectsRequestDTO",
            "class_name": "App\\DTO\\SearchProjectsRequestDTO",
            "type": "object",
            "description": "Handles search and filtering operations for user projects\nwith support for text-based search, tag filtering, and\npagination. Used by the project management system to allow\nusers to find and organize their design projects efficiently.",
            "properties": {
                "page": {
                    "name": "page",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Range",
                            "args": {
                                "min": 1,
                                "notInRangeMessage": "Page must be {{ min }} or greater"
                            }
                        }
                    ]
                },
                "limit": {
                    "name": "limit",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Range",
                            "args": {
                                "min": 1,
                                "max": 50,
                                "notInRangeMessage": "Limit must be between {{ min }} and {{ max }}"
                            }
                        }
                    ]
                },
                "search": {
                    "name": "search",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "max": 255,
                                "maxMessage": "Search query cannot be longer than {{ limit }} characters"
                            }
                        }
                    ]
                },
                "tags": {
                    "name": "tags",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [],
            "example": {
                "page": 123,
                "limit": 123,
                "search": "example_search",
                "tags": "example_tags"
            }
        },
        "TemplateResponseDTO": {
            "name": "TemplateResponseDTO",
            "class_name": "App\\DTO\\Response\\TemplateResponseDTO",
            "type": "object",
            "description": "",
            "properties": {
                "success": {
                    "name": "success",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": []
                },
                "template": {
                    "name": "template",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "templates": {
                    "name": "templates",
                    "type": "array",
                    "php_type": "array",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "total": {
                    "name": "total",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "page": {
                    "name": "page",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "totalPages": {
                    "name": "totalPages",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "php_type": "DateTimeImmutable",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": []
                }
            },
            "required": [
                "success",
                "message"
            ],
            "example": {
                "success": true,
                "message": "example_message",
                "template": [],
                "templates": [],
                "total": 123,
                "page": 123,
                "totalPages": 123,
                "timestamp": "example_timestamp"
            }
        },
        "CreateTemplateRequestDTO": {
            "name": "CreateTemplateRequestDTO",
            "class_name": "App\\DTO\\Request\\CreateTemplateRequestDTO",
            "type": "object",
            "description": "",
            "properties": {
                "name": {
                    "name": "name",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Template name is required"
                            }
                        },
                        {
                            "type": "Length",
                            "args": {
                                "max": 255,
                                "maxMessage": "Template name cannot be longer than 255 characters"
                            }
                        }
                    ]
                },
                "description": {
                    "name": "description",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "Length",
                            "args": {
                                "max": 1000,
                                "maxMessage": "Description cannot be longer than 1000 characters"
                            }
                        }
                    ]
                },
                "category": {
                    "name": "category",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Category is required"
                            }
                        },
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "social-media",
                                    "presentation",
                                    "print",
                                    "marketing",
                                    "document",
                                    "logo",
                                    "web-graphics",
                                    "video",
                                    "animation"
                                ],
                                "message": "Invalid category"
                            }
                        }
                    ]
                },
                "tags": {
                    "name": "tags",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "array",
                                "message": "Tags must be an array"
                            }
                        },
                        {
                            "type": "Valid",
                            "args": []
                        }
                    ]
                },
                "width": {
                    "name": "width",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Width is required"
                            }
                        },
                        {
                            "type": "Type",
                            "args": {
                                "type": "integer",
                                "message": "Width must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Width must be positive"
                            }
                        }
                    ]
                },
                "height": {
                    "name": "height",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotBlank",
                            "args": {
                                "message": "Height is required"
                            }
                        },
                        {
                            "type": "Type",
                            "args": {
                                "type": "integer",
                                "message": "Height must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Height must be positive"
                            }
                        }
                    ]
                },
                "canvasSettings": {
                    "name": "canvasSettings",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "array",
                                "message": "Canvas settings must be an array"
                            }
                        }
                    ]
                },
                "layers": {
                    "name": "layers",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "array",
                                "message": "Layers must be an array"
                            }
                        }
                    ]
                },
                "thumbnailUrl": {
                    "name": "thumbnailUrl",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Url",
                            "args": {
                                "message": "Thumbnail URL must be a valid URL"
                            }
                        }
                    ]
                },
                "previewUrl": {
                    "name": "previewUrl",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Url",
                            "args": {
                                "message": "Preview URL must be a valid URL"
                            }
                        }
                    ]
                },
                "isPremium": {
                    "name": "isPremium",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "bool",
                                "message": "isPremium must be a boolean"
                            }
                        }
                    ]
                },
                "isActive": {
                    "name": "isActive",
                    "type": "boolean",
                    "php_type": "bool",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "bool",
                                "message": "isActive must be a boolean"
                            }
                        }
                    ]
                }
            },
            "required": [
                "name",
                "description",
                "category",
                "tags",
                "width",
                "height"
            ],
            "example": {
                "name": "example_name",
                "description": "example_description",
                "category": "example_category",
                "tags": [],
                "width": 123,
                "height": 123,
                "canvasSettings": [],
                "layers": [],
                "thumbnailUrl": "example_thumbnailUrl",
                "previewUrl": "example_previewUrl",
                "isPremium": true,
                "isActive": true
            }
        },
        "SearchTemplateRequestDTO": {
            "name": "SearchTemplateRequestDTO",
            "class_name": "App\\DTO\\Request\\SearchTemplateRequestDTO",
            "type": "object",
            "description": "",
            "properties": {
                "q": {
                    "name": "q",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "string",
                                "message": "Query must be a string"
                            }
                        }
                    ]
                },
                "category": {
                    "name": "category",
                    "type": "string",
                    "php_type": "string",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Choice",
                            "args": {
                                "choices": [
                                    "social-media",
                                    "presentation",
                                    "print",
                                    "marketing",
                                    "document",
                                    "logo",
                                    "web-graphics",
                                    "video",
                                    "animation"
                                ],
                                "message": "Invalid category"
                            }
                        }
                    ]
                },
                "page": {
                    "name": "page",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "integer",
                                "message": "Page must be an integer"
                            }
                        },
                        {
                            "type": "Positive",
                            "args": {
                                "message": "Page must be positive"
                            }
                        }
                    ]
                },
                "limit": {
                    "name": "limit",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "Type",
                            "args": {
                                "type": "integer",
                                "message": "Limit must be an integer"
                            }
                        },
                        {
                            "type": "Range",
                            "args": {
                                "min": 1,
                                "max": 50,
                                "notInRangeMessage": "Limit must be between 1 and 50"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "q": "example_q",
                "category": "example_category",
                "page": 123,
                "limit": 123
            }
        },
        "TemplateSearchResponseDTO": {
            "name": "TemplateSearchResponseDTO",
            "class_name": "App\\DTO\\Response\\TemplateSearchResponseDTO",
            "type": "object",
            "description": "Provides specific typing for template search operations to ensure the frontend API\nknows exactly what structure to expect from template searches.",
            "properties": {
                "templates": {
                    "name": "templates",
                    "type": "array",
                    "php_type": "array",
                    "nullable": false,
                    "optional": false,
                    "description": "Array of template data with specific structure",
                    "validation": []
                },
                "page": {
                    "name": "page",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "Current page number",
                    "validation": []
                },
                "limit": {
                    "name": "limit",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "Items per page",
                    "validation": []
                },
                "total": {
                    "name": "total",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "Total number of templates found",
                    "validation": []
                },
                "totalPages": {
                    "name": "totalPages",
                    "type": "integer",
                    "php_type": "int",
                    "nullable": false,
                    "optional": false,
                    "description": "Total number of pages",
                    "validation": []
                },
                "message": {
                    "name": "message",
                    "type": "string",
                    "php_type": "string",
                    "nullable": false,
                    "optional": true,
                    "description": "Response message",
                    "validation": []
                }
            },
            "required": [
                "templates",
                "page",
                "limit",
                "total",
                "totalPages"
            ],
            "example": {
                "templates": [],
                "page": 123,
                "limit": 123,
                "total": 123,
                "totalPages": 123,
                "message": "example_message"
            }
        },
        "UploadAvatarRequestDTO": {
            "name": "UploadAvatarRequestDTO",
            "class_name": "App\\DTO\\Request\\UploadAvatarRequestDTO",
            "type": "object",
            "description": "Handles validation and encapsulation of avatar file upload data including\nfile type validation, size constraints, and security checks.",
            "properties": {
                "avatar": {
                    "name": "avatar",
                    "type": "string",
                    "php_type": "Symfony\\Component\\HttpFoundation\\File\\UploadedFile",
                    "nullable": true,
                    "optional": true,
                    "description": "",
                    "validation": [
                        {
                            "type": "NotNull",
                            "args": {
                                "message": "Avatar file is required"
                            }
                        },
                        {
                            "type": "File",
                            "args": {
                                "maxSize": "5M",
                                "maxSizeMessage": "Avatar file size cannot exceed 5MB",
                                "mimeTypes": [
                                    "image/jpeg",
                                    "image/png",
                                    "image/gif",
                                    "image/webp"
                                ],
                                "mimeTypesMessage": "Avatar must be a valid image file (JPEG, PNG, GIF, or WebP)"
                            }
                        }
                    ]
                }
            },
            "required": [],
            "example": {
                "avatar": "example_avatar"
            }
        }
    }
}