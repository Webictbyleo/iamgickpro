# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each environment
parameters:
    # Directory paths (relative to project root)
    app.upload_directory: '%kernel.project_dir%/public/uploads'
    app.media_directory: '%app.upload_directory%/media'
    app.avatar_directory: '%app.upload_directory%/avatars'
    app.thumbnail_directory: '%app.upload_directory%/thumbnails'
    app.plugin_directory: '%app.upload_directory%/plugins'
    app.plugin_extract_directory: '%kernel.project_dir%/var/plugins'
    app.export_directory: '%kernel.project_dir%/var/exports'

imports:
    - { resource: services/svg.yaml }

services:
    _defaults:
        autowire: true
        autoconfigure: true

    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Service/MediaProcessing/Config/'

    # JWT Authentication Service Configuration
    App\Service\AuthService:
        arguments:
            $fromEmail: '%env(MAIL_FROM_ADDRESS)%'
            $tokenExpiryHours: 24
            $maxLoginAttempts: 5
            $lockoutDurationMinutes: 30

    # Email Service Configuration
    App\Service\EmailService:
        arguments:
            $fromEmail: '%env(MAIL_FROM_ADDRESS)%'
            $appName: '%env(APP_NAME)%'
            $frontendUrl: '%env(FRONTEND_URL)%'

    # Integration Service Configuration
    App\Service\IntegrationService:
        arguments:
            $encryptionKey: '%env(APP_SECRET)%'

    # Testing Services (Public for direct access)
    # Make interfaces available for testing by aliasing the concrete implementations
    Doctrine\ORM\EntityManagerInterface:
        alias: doctrine.orm.default_entity_manager
        public: true
    
    Lexik\Bundle\JWTAuthenticationBundle\Services\JWTTokenManagerInterface:
        alias: lexik_jwt_authentication.jwt_manager
        public: true

    # Media Service Configuration
    App\Service\MediaService:
        arguments:
            $mediaUploadDirectory: '%app.media_directory%'
            $thumbnailDirectory: '%app.thumbnail_directory%'
            $maxFileSize: 10485760 # 10MB
            $allowedMimeTypes:
                - 'image/jpeg'
                - 'image/png'
                - 'image/gif'
                - 'image/svg+xml'
                - 'image/webp'
                - 'video/mp4'
                - 'video/webm'
                - 'audio/mpeg'
                - 'audio/wav'
                - 'audio/ogg'

    # Plugin Service Configuration
    App\Service\PluginService:
        arguments:
            $pluginDirectory: '%app.plugin_directory%'
            $extractDirectory: '%app.plugin_extract_directory%'
            $maxFileSize: 52428800 # 50MB
            $allowedMimeTypes:
                - 'application/zip'
                - 'application/x-zip-compressed'

    # Export Service Configuration
    App\Service\ExportService:
        arguments:
            $exportDirectory: '%app.export_directory%'

    # Design Service Configuration
    App\Service\DesignService:
        arguments:
            $thumbnailDirectory: '%app.thumbnail_directory%'

    # User Service Configuration
    App\Service\UserService:
        arguments:
            $avatarUploadDirectory: '%app.avatar_directory%'

    # File Upload Service Configuration
    App\Service\FileUploadService:
        arguments:
            $avatarUploadDirectory: '%app.avatar_directory%'
            $mediaUploadDirectory: '%app.media_directory%'

    # Custom argument resolver for DTOs
    App\ArgumentResolver\RequestDTOResolver:
        tags:
            - { name: controller.argument_value_resolver }

    # Custom normalizer for Tag value objects
    App\Serializer\Normalizer\TagNormalizer:
        tags:
            - { name: serializer.normalizer }

    # Video Analysis Service Configuration
    App\Service\VideoAnalysisService:
        arguments:
            $youtubeApiKey: '%env(YOUTUBE_API_KEY)%'

    # Stock Media Services Configuration
    App\Service\StockMedia\StockMediaResponseValidator:
        public: true

    App\Service\StockMedia\UnsplashService:
        arguments:
            $accessKey: '%env(UNSPLASH_ACCESS_KEY)%'
            $responseValidator: '@App\Service\StockMedia\StockMediaResponseValidator'
        public: true

    App\Service\StockMedia\IconfinderService:
        arguments:
            $apiKey: '%env(ICONFINDER_API_KEY)%'
            $responseValidator: '@App\Service\StockMedia\StockMediaResponseValidator'
        public: true

    App\Service\StockMedia\PexelsService:
        arguments:
            $apiKey: '%env(PEXELS_API_KEY)%'
            $responseValidator: '@App\Service\StockMedia\StockMediaResponseValidator'
        public: true

    # Stock Media Cache Service Configuration
    App\Service\StockMedia\StockMediaCacheService:
        arguments:
            $cache: '@stock_media.cache'
        public: true

    # Public Media Controller with cache for proxy functionality
    App\Controller\PublicMediaController:
        arguments:
            $cache: '@stock_media.cache'
        public: true

    App\Service\StockMedia\StockMediaService:
        arguments:
            $cacheService: '@App\Service\StockMedia\StockMediaCacheService'
            $unsplashService: '@App\Service\StockMedia\UnsplashService'
            $iconfinderService: '@App\Service\StockMedia\IconfinderService'
            $pexelsService: null
        public: true

    # Response DTO Factory service
    App\Service\ResponseDTOFactory: ~

    # Media Processing Services Configuration
    App\Service\MediaProcessing\Processor\ImageMagickProcessor:
        arguments:
            $imageMagickPath: '/usr/bin/magick'  # ImageMagick 7 binary path
            $timeLimit: 300  # 5 minutes for complex operations

    App\Service\MediaProcessing\Processor\FfmpegProcessor:
        arguments:
            $ffmpegPath: '/usr/bin/ffmpeg'
            $ffprobePath: '/usr/bin/ffprobe'
            $timeLimit: 600  # 10 minutes for video processing

    App\Service\MediaProcessing\AsyncMediaProcessingService:
        arguments:
            $projectDir: '%kernel.project_dir%'

    App\Service\MediaProcessing\MediaProcessingService: ~

    # Media File Controller Configuration
    App\Controller\MediaFileController:
        arguments:
            $mediaUploadDirectory: '%app.media_directory%'
            $thumbnailDirectory: '%app.thumbnail_directory%'

    # Clear Media Command Configuration
    App\Command\ClearMediaCommand:
        arguments:
            $uploadDirectory: '%app.upload_directory%'
