openapi: 3.0.3
info:
  title: 'Design Platform API'
  version: 1.0.0
  description: 'Comprehensive API for the modern web-based design platform'
  contact:
    name: 'API Support'
    email: api-support@example.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
  -
    url: 'https://api.example.com/v1'
    description: 'Production server'
  -
    url: 'https://staging-api.example.com/v1'
    description: 'Staging server'
  -
    url: 'http://localhost:8000'
    description: 'Development server'
  -
    url: 'http://localhost:8080'
    description: 'Testing server'
paths:
  /api/auth/change-password:
    put:
      summary: 'Change user password'
      operationId: putApi_auth_change-password
      tags:
        - AuthController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequestDTO'
        description: 'Request body for changePassword /api/auth/change-password'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  /api/auth/login:
    post:
      summary: 'Authenticate user and return JWT token'
      operationId: postApi_auth_login
      tags:
        - AuthController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
        description: 'Request body for login /api/auth/login'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/auth/logout:
    post:
      summary: 'Logout user'
      operationId: postApi_auth_logout
      tags:
        - AuthController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  /api/auth/me:
    get:
      summary: 'Get current authenticated user profile'
      operationId: getApi_auth_me
      tags:
        - AuthController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  /api/auth/profile:
    put:
      summary: 'Update user profile information'
      operationId: putApi_auth_profile
      tags:
        - AuthController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequestDTO'
        description: 'Request body for updateProfile /api/auth/profile'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  /api/auth/register:
    post:
      summary: 'Register a new user account'
      operationId: postApi_auth_register
      tags:
        - AuthController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDTO'
        description: 'Request body for register /api/auth/register'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/designs:
    get:
      summary: 'List designs for authenticated user'
      operationId: getApi_designs
      tags:
        - DesignController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    post:
      summary: 'Create a new design'
      operationId: postApi_designs
      tags:
        - DesignController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDesignRequestDTO'
        description: 'Request body for create /api/designs'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DesignResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/designs/search:
    get:
      summary: 'Search designs'
      operationId: getApi_designs_search
      tags:
        - DesignController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/designs/{id}':
    get:
      summary: 'Get details of a specific design'
      operationId: getApi_designs_id
      tags:
        - DesignController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DesignResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    put:
      summary: 'Update an existing design'
      operationId: putApi_designs_id
      tags:
        - DesignController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDesignRequestDTO'
        description: 'Request body for update /api/designs/{id}'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DesignResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    delete:
      summary: 'Delete a design'
      operationId: deleteApi_designs_id
      tags:
        - DesignController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/designs/{id}/duplicate':
    post:
      summary: 'Duplicate an existing design'
      operationId: postApi_designs_id_duplicate
      tags:
        - DesignController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateDesignRequestDTO'
        description: 'Request body for duplicate /api/designs/{id}/duplicate'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DesignResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/designs/{id}/thumbnail':
    put:
      summary: 'Update design thumbnail'
      operationId: putApi_designs_id_thumbnail
      tags:
        - DesignController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDesignThumbnailRequestDTO'
        description: 'Request body for updateThumbnail /api/designs/{id}/thumbnail'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DesignResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/export-jobs:
    get:
      summary: 'List export jobs for authenticated user'
      operationId: getApi_export-jobs
      tags:
        - ExportJobController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportJobResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
    post:
      summary: 'Create a new export job'
      operationId: postApi_export-jobs
      tags:
        - ExportJobController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExportJobRequestDTO'
        description: 'Request body for create /api/export-jobs'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportJobResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  /api/export-jobs/queue-status:
    get:
      summary: 'Get export job queue status (Admin only)'
      operationId: getApi_export-jobs_queue-status
      tags:
        - ExportJobController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  /api/export-jobs/stats:
    get:
      summary: 'Get export job statistics for authenticated user'
      operationId: getApi_export-jobs_stats
      tags:
        - ExportJobController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  '/api/export-jobs/{id}':
    get:
      summary: 'Get details of a specific export job'
      operationId: getApi_export-jobs_id
      tags:
        - ExportJobController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportJobResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
    put:
      summary: 'Update an export job (Not allowed)'
      operationId: putApi_export-jobs_id
      tags:
        - ExportJobController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
    delete:
      summary: 'Delete an export job'
      operationId: deleteApi_export-jobs_id
      tags:
        - ExportJobController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  '/api/export-jobs/{id}/cancel':
    post:
      summary: 'Cancel a pending or processing export job'
      operationId: postApi_export-jobs_id_cancel
      tags:
        - ExportJobController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportJobResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  '/api/export-jobs/{id}/download':
    get:
      summary: 'Download export job output file'
      operationId: getApi_export-jobs_id_download
      tags:
        - ExportJobController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  '/api/export-jobs/{id}/retry':
    post:
      summary: 'Retry a failed export job'
      operationId: postApi_export-jobs_id_retry
      tags:
        - ExportJobController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportJobResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  /api/layers:
    post:
      summary: 'Create a new layer in a design'
      operationId: postApi_layers
      tags:
        - LayerController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLayerRequestDTO'
        description: 'Request body for create /api/layers'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/layers/bulk-update:
    put:
      summary: 'Bulk update multiple layers'
      operationId: putApi_layers_bulk-update
      tags:
        - LayerController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkUpdateLayersRequestDTO'
        description: 'Request body for bulkUpdate /api/layers/bulk-update'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/layers/{id}':
    get:
      summary: 'Get details of a specific layer'
      operationId: getApi_layers_id
      tags:
        - LayerController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    put:
      summary: 'Update an existing layer'
      operationId: putApi_layers_id
      tags:
        - LayerController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLayerRequestDTO'
        description: 'Request body for update /api/layers/{id}'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    delete:
      summary: 'Delete a layer from a design'
      operationId: deleteApi_layers_id
      tags:
        - LayerController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/layers/{id}/duplicate':
    post:
      summary: 'Duplicate a layer within a design'
      operationId: postApi_layers_id_duplicate
      tags:
        - LayerController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateLayerRequestDTO'
        description: 'Request body for duplicate /api/layers/{id}/duplicate'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/layers/{id}/move':
    put:
      summary: 'Move a layer within the design hierarchy'
      operationId: putApi_layers_id_move
      tags:
        - LayerController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveLayerRequestDTO'
        description: 'Request body for move /api/layers/{id}/move'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/media:
    get:
      summary: 'List media files for authenticated user'
      operationId: getApi_media
      tags:
        - MediaController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    post:
      summary: 'Create a new media file entry'
      operationId: postApi_media
      tags:
        - MediaController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMediaRequestDTO'
        description: 'Request body for create /api/media'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/media/bulk/delete:
    delete:
      summary: 'Bulk delete multiple media files'
      operationId: deleteApi_media_bulk_delete
      tags:
        - MediaController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/media/duplicate/{uuid}':
    post:
      summary: 'Duplicate a media file'
      operationId: postApi_media_duplicate_uuid
      tags:
        - MediaController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateMediaRequestDTO'
        description: 'Request body for duplicate /api/media/duplicate/{uuid}'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/media/search:
    get:
      summary: 'Search media files'
      operationId: getApi_media_search
      tags:
        - MediaController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/media/stock/search:
    get:
      summary: 'Search stock media from external providers'
      operationId: getApi_media_stock_search
      tags:
        - MediaController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/media/{uuid}':
    get:
      summary: 'Get details of a specific media file'
      operationId: getApi_media_uuid
      tags:
        - MediaController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    put:
      summary: 'Update media file metadata'
      operationId: putApi_media_uuid
      tags:
        - MediaController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMediaRequestDTO'
        description: 'Request body for update /api/media/{uuid}'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    delete:
      summary: 'Delete a media file'
      operationId: deleteApi_media_uuid
      tags:
        - MediaController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/plugins:
    get:
      summary: 'Retrieve paginated list of plugins with filtering options'
      operationId: getApi_plugins
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    post:
      summary: 'Create a new plugin'
      operationId: postApi_plugins
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePluginRequestDTO'
        description: 'Request body for create /api/plugins'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  /api/plugins/categories:
    get:
      summary: 'Get available plugin categories'
      operationId: getApi_plugins_categories
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/plugins/my-plugins:
    get:
      summary: "Get current user's plugins"
      operationId: getApi_plugins_my-plugins
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  '/api/plugins/{id}':
    get:
      summary: 'Retrieve detailed information about a specific plugin'
      operationId: getApi_plugins_id
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    put:
      summary: 'Update an existing plugin'
      operationId: putApi_plugins_id
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePluginRequestDTO'
        description: 'Request body for update /api/plugins/{id}'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
    delete:
      summary: 'Delete a plugin'
      operationId: deleteApi_plugins_id
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  '/api/plugins/{id}/approve':
    post:
      summary: 'Approve a plugin (Admin only)'
      operationId: postApi_plugins_id_approve
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  '/api/plugins/{id}/install':
    post:
      summary: 'Install a plugin for the current user'
      operationId: postApi_plugins_id_install
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  '/api/plugins/{id}/reject':
    post:
      summary: 'Reject a plugin (Admin only)'
      operationId: postApi_plugins_id_reject
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectPluginRequestDTO'
        description: 'Request body for reject /api/plugins/{id}/reject'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  '/api/plugins/{id}/uninstall':
    post:
      summary: 'Uninstall a plugin for the current user'
      operationId: postApi_plugins_id_uninstall
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  '/api/plugins/{id}/upload-file':
    post:
      summary: 'Upload a plugin file'
      operationId: postApi_plugins_id_upload-file
      tags:
        - PluginController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadPluginFileRequestDTO'
        description: 'Request body for uploadFile /api/plugins/{id}/upload-file'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  /api/projects:
    get:
      summary: 'List projects for authenticated user'
      operationId: getApi_projects
      tags:
        - ProjectController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    post:
      summary: 'Create a new project'
      operationId: postApi_projects
      tags:
        - ProjectController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequestDTO'
        description: 'Request body for create /api/projects'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/projects/public:
    get:
      summary: 'List public projects'
      operationId: getApi_projects_public
      tags:
        - ProjectController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/projects/{id}':
    get:
      summary: 'Get details of a specific project'
      operationId: getApi_projects_id
      tags:
        - ProjectController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    put:
      summary: 'Update an existing project'
      operationId: putApi_projects_id
      tags:
        - ProjectController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequestDTO'
        description: 'Request body for update /api/projects/{id}'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    delete:
      summary: 'Delete a project'
      operationId: deleteApi_projects_id
      tags:
        - ProjectController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/projects/{id}/duplicate':
    post:
      summary: 'Duplicate an existing project'
      operationId: postApi_projects_id_duplicate
      tags:
        - ProjectController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateProjectRequestDTO'
        description: 'Request body for duplicate /api/projects/{id}/duplicate'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/projects/{id}/share':
    post:
      summary: 'Toggle project sharing status'
      operationId: postApi_projects_id_share
      tags:
        - ProjectController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/templates:
    get:
      summary: 'List available templates with filtering and pagination'
      operationId: getApi_templates
      tags:
        - TemplateController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    post:
      summary: 'Create a new template'
      operationId: postApi_templates
      tags:
        - TemplateController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateRequestDTO'
        description: 'Request body for create /api/templates'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  /api/templates/categories:
    get:
      summary: 'Get available template categories'
      operationId: getApi_templates_categories
      tags:
        - TemplateController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/templates/search:
    get:
      summary: 'Search templates with advanced filtering'
      operationId: getApi_templates_search
      tags:
        - TemplateController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateSearchResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/templates/{uuid}':
    get:
      summary: 'Get details of a specific template'
      operationId: getApi_templates_uuid
      tags:
        - TemplateController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  '/api/templates/{uuid}/use':
    post:
      summary: 'Use a template to create a new design'
      operationId: postApi_templates_uuid_use
      tags:
        - TemplateController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters:
        -
          name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DesignResponseDTO'
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: Unauthorized }
                  message: { type: string, example: 'Authentication required' }
  /api/user/avatar:
    post:
      summary: 'Upload and update user avatar image'
      operationId: postApi_user_avatar
      tags:
        - UserController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadAvatarRequestDTO'
        description: 'Request body for uploadAvatar /api/user/avatar'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/user/password:
    put:
      summary: 'Change user password'
      operationId: putApi_user_password
      tags:
        - UserController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequestDTO'
        description: 'Request body for changePassword /api/user/password'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/user/profile:
    get:
      summary: "Get current user's profile information"
      operationId: getApi_user_profile
      tags:
        - UserController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
    put:
      summary: "Update current user's profile information"
      operationId: putApi_user_profile
      tags:
        - UserController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequestDTO'
        description: 'Request body for updateProfile /api/user/profile'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/user/settings/privacy/delete:
    delete:
      summary: 'Delete user account and all associated data'
      operationId: deleteApi_user_settings_privacy_delete
      tags:
        - UserController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/user/settings/privacy/download:
    post:
      summary: 'Request user data download for GDPR compliance'
      operationId: postApi_user_settings_privacy_download
      tags:
        - UserController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/user/settings/privacy/export:
    post:
      summary: 'Export user data in portable format'
      operationId: postApi_user_settings_privacy_export
      tags:
        - UserController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
  /api/user/subscription:
    get:
      summary: 'Get user subscription information'
      operationId: getApi_user_subscription
      tags:
        - UserController
      deprecated: false
      security:
        -
          bearerAuth: {  }
      parameters: {  }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        400:
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'Bad Request' }
                  message: { type: string, example: 'Invalid input data' }
components:
  schemas:
    ChangePasswordRequestDTO:
      type: object
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
        confirmPassword:
          type: string
      required:
        - currentPassword
        - newPassword
        - confirmPassword
    SuccessResponseDTO:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
        timestamp:
          type: string
      required:
        - message
    LoginRequestDTO:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    AuthResponseDTO:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        user:
          type: string
        success:
          type: boolean
        timestamp:
          type: string
      required:
        - message
        - token
        - user
    UserProfileResponseDTO:
      type: object
      properties:
        user:
          type: string
        message:
          type: string
        success:
          type: boolean
        timestamp:
          type: string
      required:
        - user
    UpdateProfileRequestDTO:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
        jobTitle:
          type: string
        company:
          type: string
        website:
          type: string
        portfolio:
          type: string
        bio:
          type: string
        socialLinks:
          type: array
          items:
            type: object
        timezone:
          type: string
        language:
          type: string
    RegisterRequestDTO:
      type: object
      properties:
        email:
          type: string
          description: "User's email address"
        password:
          type: string
          description: "User's password"
        firstName:
          type: string
          description: "User's first name"
        lastName:
          type: string
          description: "User's last name"
        username:
          type: string
          description: "User's optional username"
      required:
        - email
        - password
        - firstName
        - lastName
    PaginatedResponseDTO:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        message:
          type: string
      required:
        - data
        - page
        - limit
        - total
        - totalPages
    CreateDesignRequestDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        data:
          type: string
        projectId:
          type: integer
        width:
          type: integer
        height:
          type: integer
        isPublic:
          type: boolean
      required:
        - name
    DesignResponseDTO:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        design:
          type: array
          items:
            type: object
        designs:
          type: array
          items:
            type: object
        total:
          type: integer
        page:
          type: integer
        totalPages:
          type: integer
        timestamp:
          type: string
      required:
        - success
        - message
    UpdateDesignRequestDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        data:
          type: string
        projectId:
          type: integer
        width:
          type: integer
        height:
          type: integer
        isPublic:
          type: boolean
    DuplicateDesignRequestDTO:
      type: object
      properties:
        name:
          type: string
        projectId:
          type: integer
    UpdateDesignThumbnailRequestDTO:
      type: object
      properties:
        thumbnail:
          type: string
      required:
        - thumbnail
    ExportJobResponseDTO:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        job:
          type: array
          items:
            type: object
        jobs:
          type: array
          items:
            type: object
        total:
          type: integer
        page:
          type: integer
        totalPages:
          type: integer
        timestamp:
          type: string
      required:
        - success
        - message
    CreateExportJobRequestDTO:
      type: object
      properties:
        designId:
          type: integer
        format:
          type: string
        quality:
          type: string
        width:
          type: integer
        height:
          type: integer
        scale:
          type: number
        transparent:
          type: boolean
        backgroundColor:
          type: string
        animationSettings:
          type: array
          items:
            type: object
      required:
        - designId
    ErrorResponseDTO:
      type: object
      properties:
        message:
          type: string
        details:
          type: array
          items:
            type: object
        code:
          type: string
        timestamp:
          type: string
      required:
        - message
    CreateLayerRequestDTO:
      type: object
      properties:
        designId:
          type: string
        type:
          type: string
        name:
          type: string
        properties:
          type: string
        transform:
          type: string
        zIndex:
          type: integer
        visible:
          type: boolean
        locked:
          type: boolean
        parentLayerId:
          type: string
      required:
        - designId
        - type
        - name
        - properties
        - transform
    LayerResponseDTO:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        layer:
          type: array
          items:
            type: object
        layers:
          type: array
          items:
            type: object
        timestamp:
          type: string
      required:
        - success
        - message
    BulkUpdateLayersRequestDTO:
      type: object
      properties:
        layers:
          type: array
          items:
            type: object
      required:
        - layers
    UpdateLayerRequestDTO:
      type: object
      properties:
        name:
          type: string
        properties:
          type: string
        transform:
          type: string
        zIndex:
          type: integer
        visible:
          type: boolean
        locked:
          type: boolean
        parentLayerId:
          type: string
    DuplicateLayerRequestDTO:
      type: object
      properties:
        name:
          type: string
        targetDesignId:
          type: string
    MoveLayerRequestDTO:
      type: object
      properties:
        direction:
          type: string
        targetZIndex:
          type: integer
    CreateMediaRequestDTO:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        mimeType:
          type: string
        size:
          type: integer
        url:
          type: string
        thumbnailUrl:
          type: string
        width:
          type: integer
        height:
          type: integer
        duration:
          type: number
        source:
          type: string
        sourceId:
          type: string
        metadata:
          type: string
        tags:
          type: array
          items:
            type: object
        attribution:
          type: string
        license:
          type: string
        isPremium:
          type: boolean
        isActive:
          type: boolean
      required:
        - name
        - type
        - mimeType
        - size
        - url
    MediaResponseDTO:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        media:
          type: array
          items:
            type: object
        mediaList:
          type: array
          items:
            type: object
        total:
          type: integer
        page:
          type: integer
        totalPages:
          type: integer
        timestamp:
          type: string
      required:
        - success
        - message
    DuplicateMediaRequestDTO:
      type: object
      properties:
        name:
          type: string
    UpdateMediaRequestDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: object
        metadata:
          type: string
        isPremium:
          type: boolean
        isActive:
          type: boolean
        isPublic:
          type: boolean
    CreatePluginRequestDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        categories:
          type: array
          items:
            type: object
        version:
          type: string
        permissions:
          type: array
          items:
            type: object
        manifest:
          type: array
          items:
            type: object
      required:
        - name
        - description
        - categories
        - version
        - permissions
        - manifest
    UpdatePluginRequestDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        categories:
          type: array
          items:
            type: object
        version:
          type: string
        permissions:
          type: array
          items:
            type: object
        manifest:
          type: array
          items:
            type: object
        status:
          type: string
    RejectPluginRequestDTO:
      type: object
      properties:
        reason:
          type: string
      required:
        - reason
    UploadPluginFileRequestDTO:
      type: object
      properties:
        file:
          type: string
    CreateProjectRequestDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        isPublic:
          type: boolean
        settings:
          type: string
        tags:
          type: array
          items:
            type: object
        thumbnail:
          type: string
      required:
        - name
        - description
        - isPublic
        - settings
    ProjectResponseDTO:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        project:
          type: array
          items:
            type: object
        projects:
          type: array
          items:
            type: object
        total:
          type: integer
        page:
          type: integer
        totalPages:
          type: integer
        timestamp:
          type: string
      required:
        - success
        - message
    UpdateProjectRequestDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        isPublic:
          type: boolean
        settings:
          type: string
        tags:
          type: array
          items:
            type: object
        thumbnail:
          type: string
    DuplicateProjectRequestDTO:
      type: object
      properties:
        name:
          type: string
    TemplateResponseDTO:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        template:
          type: array
          items:
            type: object
        templates:
          type: array
          items:
            type: object
        total:
          type: integer
        page:
          type: integer
        totalPages:
          type: integer
        timestamp:
          type: string
      required:
        - success
        - message
    CreateTemplateRequestDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
        tags:
          type: array
          items:
            type: object
        width:
          type: integer
        height:
          type: integer
        canvasSettings:
          type: array
          items:
            type: object
        layers:
          type: array
          items:
            type: object
        thumbnailUrl:
          type: string
        previewUrl:
          type: string
        isPremium:
          type: boolean
        isActive:
          type: boolean
      required:
        - name
        - description
        - category
        - tags
        - width
        - height
    TemplateSearchResponseDTO:
      type: object
      properties:
        templates:
          type: array
          items:
            type: object
        page:
          type: integer
          description: 'Current page number'
        limit:
          type: integer
          description: 'Items per page'
        total:
          type: integer
          description: 'Total number of templates found'
        totalPages:
          type: integer
          description: 'Total number of pages'
        message:
          type: string
          description: 'Response message'
      required:
        - templates
        - page
        - limit
        - total
        - totalPages
    UploadAvatarRequestDTO:
      type: object
      properties:
        avatar:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
